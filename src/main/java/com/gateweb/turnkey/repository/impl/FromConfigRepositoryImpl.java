/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.FromConfig;
import com.gateweb.turnkey.model.QFromConfig;
import com.gateweb.turnkey.repository.FromConfigRepository;
import com.gateweb.turnkey.repository.FromConfigRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of FromConfig
 */
//@Repository("fromConfigRepositoryCustom")
public class FromConfigRepositoryImpl implements FromConfigRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	FromConfigRepository fromConfigRepository;
	
	public FromConfigRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<FromConfig> searchWithVo(FromConfig vo) {
		log.debug("FromConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QFromConfig fromConfig = QFromConfig.fromConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(fromConfig.routingDescription.equalsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if ( vo.getSubstitutePartyId() != null && !"".equals(vo.getSubstitutePartyId())) {
			builder.and(fromConfig.substitutePartyId.equalsIgnoreCase(vo.getSubstitutePartyId())); //java.lang.String
		}
		if ( vo.getTransportPassword() != null && !"".equals(vo.getTransportPassword())) {
			builder.and(fromConfig.transportPassword.equalsIgnoreCase(vo.getTransportPassword())); //java.lang.String
		}
		if ( vo.getSignId() != null && !"".equals(vo.getSignId())) {
			builder.and(fromConfig.signId.equalsIgnoreCase(vo.getSignId())); //java.lang.String
		}
		if ( vo.getPartyId() != null && !"".equals(vo.getPartyId())) {
			builder.and(fromConfig.partyId.equalsIgnoreCase(vo.getPartyId())); //java.lang.String
		}
		if ( vo.getTransportId() != null && !"".equals(vo.getTransportId())) {
			builder.and(fromConfig.transportId.equalsIgnoreCase(vo.getTransportId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(fromConfig.partyDescription.equalsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(fromConfig.routingId.equalsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("FromConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(fromConfigRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<FromConfig> searchWithVo(FromConfig vo, Pageable pageable) {
		log.debug("FromConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QFromConfig fromConfig = QFromConfig.fromConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(fromConfig.routingDescription.equalsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if ( vo.getSubstitutePartyId() != null && !"".equals(vo.getSubstitutePartyId())) {
			builder.and(fromConfig.substitutePartyId.equalsIgnoreCase(vo.getSubstitutePartyId())); //java.lang.String
		}
		if ( vo.getTransportPassword() != null && !"".equals(vo.getTransportPassword())) {
			builder.and(fromConfig.transportPassword.equalsIgnoreCase(vo.getTransportPassword())); //java.lang.String
		}
		if ( vo.getSignId() != null && !"".equals(vo.getSignId())) {
			builder.and(fromConfig.signId.equalsIgnoreCase(vo.getSignId())); //java.lang.String
		}
		if ( vo.getPartyId() != null && !"".equals(vo.getPartyId())) {
			builder.and(fromConfig.partyId.equalsIgnoreCase(vo.getPartyId())); //java.lang.String
		}
		if ( vo.getTransportId() != null && !"".equals(vo.getTransportId())) {
			builder.and(fromConfig.transportId.equalsIgnoreCase(vo.getTransportId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(fromConfig.partyDescription.equalsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(fromConfig.routingId.equalsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("FromConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(fromConfigRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<FromConfig> searchWithVo(FromConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<FromConfig> searchLikeVo(FromConfig vo) {
		log.debug("FromConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QFromConfig fromConfig = QFromConfig.fromConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(fromConfig.routingDescription.containsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if ( vo.getSubstitutePartyId() != null && !"".equals(vo.getSubstitutePartyId())) {
			builder.and(fromConfig.substitutePartyId.containsIgnoreCase(vo.getSubstitutePartyId())); //java.lang.String
		}
		if ( vo.getTransportPassword() != null && !"".equals(vo.getTransportPassword())) {
			builder.and(fromConfig.transportPassword.containsIgnoreCase(vo.getTransportPassword())); //java.lang.String
		}
		if ( vo.getSignId() != null && !"".equals(vo.getSignId())) {
			builder.and(fromConfig.signId.containsIgnoreCase(vo.getSignId())); //java.lang.String
		}
		if ( vo.getPartyId() != null && !"".equals(vo.getPartyId())) {
			builder.and(fromConfig.partyId.containsIgnoreCase(vo.getPartyId())); //java.lang.String
		}
		if ( vo.getTransportId() != null && !"".equals(vo.getTransportId())) {
			builder.and(fromConfig.transportId.containsIgnoreCase(vo.getTransportId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(fromConfig.partyDescription.containsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(fromConfig.routingId.containsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("FromConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(fromConfigRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<FromConfig> searchLikeVo(FromConfig vo, Pageable pageable) {
		log.debug("FromConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QFromConfig fromConfig = QFromConfig.fromConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(fromConfig.routingDescription.containsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if ( vo.getSubstitutePartyId() != null && !"".equals(vo.getSubstitutePartyId())) {
			builder.and(fromConfig.substitutePartyId.containsIgnoreCase(vo.getSubstitutePartyId())); //java.lang.String
		}
		if ( vo.getTransportPassword() != null && !"".equals(vo.getTransportPassword())) {
			builder.and(fromConfig.transportPassword.containsIgnoreCase(vo.getTransportPassword())); //java.lang.String
		}
		if ( vo.getSignId() != null && !"".equals(vo.getSignId())) {
			builder.and(fromConfig.signId.containsIgnoreCase(vo.getSignId())); //java.lang.String
		}
		if ( vo.getPartyId() != null && !"".equals(vo.getPartyId())) {
			builder.and(fromConfig.partyId.containsIgnoreCase(vo.getPartyId())); //java.lang.String
		}
		if ( vo.getTransportId() != null && !"".equals(vo.getTransportId())) {
			builder.and(fromConfig.transportId.containsIgnoreCase(vo.getTransportId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(fromConfig.partyDescription.containsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(fromConfig.routingId.containsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("FromConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(fromConfigRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<FromConfig> searchLikeVo(FromConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
