/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.QTaskConfig;
import com.gateweb.turnkey.model.TaskConfig;
import com.gateweb.turnkey.repository.TaskConfigRepository;
import com.gateweb.turnkey.repository.TaskConfigRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of TaskConfig
 */
//@Repository("taskConfigRepositoryCustom")
public class TaskConfigRepositoryImpl implements TaskConfigRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	TaskConfigRepository taskConfigRepository;
	
	public TaskConfigRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchWithVo(TaskConfig vo) {
		log.debug("TaskConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTaskConfig taskConfig = QTaskConfig.taskConfig;

		if ( vo.getTransChineseDate() != null && !"".equals(vo.getTransChineseDate())) {
			builder.and(taskConfig.transChineseDate.equalsIgnoreCase(vo.getTransChineseDate())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getTask() != null && !"".equals(vo.getId().getTask())) {
			builder.and(taskConfig.id.task.equalsIgnoreCase(vo.getId().getTask())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getCategoryType() != null && !"".equals(vo.getId().getCategoryType())) {
			builder.and(taskConfig.id.categoryType.equalsIgnoreCase(vo.getId().getCategoryType())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getProcessType() != null && !"".equals(vo.getId().getProcessType())) {
			builder.and(taskConfig.id.processType.equalsIgnoreCase(vo.getId().getProcessType())); //java.lang.String
		}
		if ( vo.getSrcPath() != null && !"".equals(vo.getSrcPath())) {
			builder.and(taskConfig.srcPath.equalsIgnoreCase(vo.getSrcPath())); //java.lang.String
		}
		if ( vo.getEncoding() != null && !"".equals(vo.getEncoding())) {
			builder.and(taskConfig.encoding.equalsIgnoreCase(vo.getEncoding())); //java.lang.String
		}
		if ( vo.getVersion() != null && !"".equals(vo.getVersion())) {
			builder.and(taskConfig.version.equalsIgnoreCase(vo.getVersion())); //java.lang.String
		}
		if ( vo.getTargetPath() != null && !"".equals(vo.getTargetPath())) {
			builder.and(taskConfig.targetPath.equalsIgnoreCase(vo.getTargetPath())); //java.lang.String
		}
		if ( vo.getFileFormat() != null && !"".equals(vo.getFileFormat())) {
			builder.and(taskConfig.fileFormat.equalsIgnoreCase(vo.getFileFormat())); //java.lang.String
		}
		log.debug("TaskConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(taskConfigRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchWithVo(TaskConfig vo, Pageable pageable) {
		log.debug("TaskConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTaskConfig taskConfig = QTaskConfig.taskConfig;

		if ( vo.getTransChineseDate() != null && !"".equals(vo.getTransChineseDate())) {
			builder.and(taskConfig.transChineseDate.equalsIgnoreCase(vo.getTransChineseDate())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getTask() != null && !"".equals(vo.getId().getTask())) {
			builder.and(taskConfig.id.task.equalsIgnoreCase(vo.getId().getTask())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getCategoryType() != null && !"".equals(vo.getId().getCategoryType())) {
			builder.and(taskConfig.id.categoryType.equalsIgnoreCase(vo.getId().getCategoryType())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getProcessType() != null && !"".equals(vo.getId().getProcessType())) {
			builder.and(taskConfig.id.processType.equalsIgnoreCase(vo.getId().getProcessType())); //java.lang.String
		}
		if ( vo.getSrcPath() != null && !"".equals(vo.getSrcPath())) {
			builder.and(taskConfig.srcPath.equalsIgnoreCase(vo.getSrcPath())); //java.lang.String
		}
		if ( vo.getEncoding() != null && !"".equals(vo.getEncoding())) {
			builder.and(taskConfig.encoding.equalsIgnoreCase(vo.getEncoding())); //java.lang.String
		}
		if ( vo.getVersion() != null && !"".equals(vo.getVersion())) {
			builder.and(taskConfig.version.equalsIgnoreCase(vo.getVersion())); //java.lang.String
		}
		if ( vo.getTargetPath() != null && !"".equals(vo.getTargetPath())) {
			builder.and(taskConfig.targetPath.equalsIgnoreCase(vo.getTargetPath())); //java.lang.String
		}
		if ( vo.getFileFormat() != null && !"".equals(vo.getFileFormat())) {
			builder.and(taskConfig.fileFormat.equalsIgnoreCase(vo.getFileFormat())); //java.lang.String
		}
		log.debug("TaskConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(taskConfigRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchWithVo(TaskConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchLikeVo(TaskConfig vo) {
		log.debug("TaskConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTaskConfig taskConfig = QTaskConfig.taskConfig;

		if ( vo.getTransChineseDate() != null && !"".equals(vo.getTransChineseDate())) {
			builder.and(taskConfig.transChineseDate.containsIgnoreCase(vo.getTransChineseDate())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getTask() != null && !"".equals(vo.getId().getTask())) {
			builder.and(taskConfig.id.task.containsIgnoreCase(vo.getId().getTask())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getCategoryType() != null && !"".equals(vo.getId().getCategoryType())) {
			builder.and(taskConfig.id.categoryType.containsIgnoreCase(vo.getId().getCategoryType())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getProcessType() != null && !"".equals(vo.getId().getProcessType())) {
			builder.and(taskConfig.id.processType.containsIgnoreCase(vo.getId().getProcessType())); //java.lang.String
		}
		if ( vo.getSrcPath() != null && !"".equals(vo.getSrcPath())) {
			builder.and(taskConfig.srcPath.containsIgnoreCase(vo.getSrcPath())); //java.lang.String
		}
		if ( vo.getEncoding() != null && !"".equals(vo.getEncoding())) {
			builder.and(taskConfig.encoding.containsIgnoreCase(vo.getEncoding())); //java.lang.String
		}
		if ( vo.getVersion() != null && !"".equals(vo.getVersion())) {
			builder.and(taskConfig.version.containsIgnoreCase(vo.getVersion())); //java.lang.String
		}
		if ( vo.getTargetPath() != null && !"".equals(vo.getTargetPath())) {
			builder.and(taskConfig.targetPath.containsIgnoreCase(vo.getTargetPath())); //java.lang.String
		}
		if ( vo.getFileFormat() != null && !"".equals(vo.getFileFormat())) {
			builder.and(taskConfig.fileFormat.containsIgnoreCase(vo.getFileFormat())); //java.lang.String
		}
		log.debug("TaskConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(taskConfigRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchLikeVo(TaskConfig vo, Pageable pageable) {
		log.debug("TaskConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTaskConfig taskConfig = QTaskConfig.taskConfig;

		if ( vo.getTransChineseDate() != null && !"".equals(vo.getTransChineseDate())) {
			builder.and(taskConfig.transChineseDate.containsIgnoreCase(vo.getTransChineseDate())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getTask() != null && !"".equals(vo.getId().getTask())) {
			builder.and(taskConfig.id.task.containsIgnoreCase(vo.getId().getTask())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getCategoryType() != null && !"".equals(vo.getId().getCategoryType())) {
			builder.and(taskConfig.id.categoryType.containsIgnoreCase(vo.getId().getCategoryType())); //java.lang.String
		}
		if ( vo.getId() != null && vo.getId().getProcessType() != null && !"".equals(vo.getId().getProcessType())) {
			builder.and(taskConfig.id.processType.containsIgnoreCase(vo.getId().getProcessType())); //java.lang.String
		}
		if ( vo.getSrcPath() != null && !"".equals(vo.getSrcPath())) {
			builder.and(taskConfig.srcPath.containsIgnoreCase(vo.getSrcPath())); //java.lang.String
		}
		if ( vo.getEncoding() != null && !"".equals(vo.getEncoding())) {
			builder.and(taskConfig.encoding.containsIgnoreCase(vo.getEncoding())); //java.lang.String
		}
		if ( vo.getVersion() != null && !"".equals(vo.getVersion())) {
			builder.and(taskConfig.version.containsIgnoreCase(vo.getVersion())); //java.lang.String
		}
		if ( vo.getTargetPath() != null && !"".equals(vo.getTargetPath())) {
			builder.and(taskConfig.targetPath.containsIgnoreCase(vo.getTargetPath())); //java.lang.String
		}
		if ( vo.getFileFormat() != null && !"".equals(vo.getFileFormat())) {
			builder.and(taskConfig.fileFormat.containsIgnoreCase(vo.getFileFormat())); //java.lang.String
		}
		log.debug("TaskConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(taskConfigRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<TaskConfig> searchLikeVo(TaskConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
