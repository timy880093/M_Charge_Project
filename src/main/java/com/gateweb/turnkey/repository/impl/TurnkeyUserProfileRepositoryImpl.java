/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.QTurnkeyUserProfile;
import com.gateweb.turnkey.model.TurnkeyUserProfile;
import com.gateweb.turnkey.repository.TurnkeyUserProfileRepository;
import com.gateweb.turnkey.repository.TurnkeyUserProfileRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of TurnkeyUserProfile
 */
//@Repository("turnkeyUserProfileRepositoryCustom")
public class TurnkeyUserProfileRepositoryImpl implements TurnkeyUserProfileRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	TurnkeyUserProfileRepository turnkeyUserProfileRepository;
	
	public TurnkeyUserProfileRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchWithVo(TurnkeyUserProfile vo) {
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTurnkeyUserProfile turnkeyUserProfile = QTurnkeyUserProfile.turnkeyUserProfile;

		if ( vo.getUserRole() != null && !"".equals(vo.getUserRole())) {
			builder.and(turnkeyUserProfile.userRole.equalsIgnoreCase(vo.getUserRole())); //java.lang.String
		}
		if ( vo.getUserPassword() != null && !"".equals(vo.getUserPassword())) {
			builder.and(turnkeyUserProfile.userPassword.equalsIgnoreCase(vo.getUserPassword())); //java.lang.String
		}
		if ( vo.getUserId() != null && !"".equals(vo.getUserId())) {
			builder.and(turnkeyUserProfile.userId.equalsIgnoreCase(vo.getUserId())); //java.lang.String
		}
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(turnkeyUserProfileRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchWithVo(TurnkeyUserProfile vo, Pageable pageable) {
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTurnkeyUserProfile turnkeyUserProfile = QTurnkeyUserProfile.turnkeyUserProfile;

		if ( vo.getUserRole() != null && !"".equals(vo.getUserRole())) {
			builder.and(turnkeyUserProfile.userRole.equalsIgnoreCase(vo.getUserRole())); //java.lang.String
		}
		if ( vo.getUserPassword() != null && !"".equals(vo.getUserPassword())) {
			builder.and(turnkeyUserProfile.userPassword.equalsIgnoreCase(vo.getUserPassword())); //java.lang.String
		}
		if ( vo.getUserId() != null && !"".equals(vo.getUserId())) {
			builder.and(turnkeyUserProfile.userId.equalsIgnoreCase(vo.getUserId())); //java.lang.String
		}
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(turnkeyUserProfileRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchWithVo(TurnkeyUserProfile vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchLikeVo(TurnkeyUserProfile vo) {
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTurnkeyUserProfile turnkeyUserProfile = QTurnkeyUserProfile.turnkeyUserProfile;

		if ( vo.getUserRole() != null && !"".equals(vo.getUserRole())) {
			builder.and(turnkeyUserProfile.userRole.containsIgnoreCase(vo.getUserRole())); //java.lang.String
		}
		if ( vo.getUserPassword() != null && !"".equals(vo.getUserPassword())) {
			builder.and(turnkeyUserProfile.userPassword.containsIgnoreCase(vo.getUserPassword())); //java.lang.String
		}
		if ( vo.getUserId() != null && !"".equals(vo.getUserId())) {
			builder.and(turnkeyUserProfile.userId.containsIgnoreCase(vo.getUserId())); //java.lang.String
		}
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(turnkeyUserProfileRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchLikeVo(TurnkeyUserProfile vo, Pageable pageable) {
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QTurnkeyUserProfile turnkeyUserProfile = QTurnkeyUserProfile.turnkeyUserProfile;

		if ( vo.getUserRole() != null && !"".equals(vo.getUserRole())) {
			builder.and(turnkeyUserProfile.userRole.containsIgnoreCase(vo.getUserRole())); //java.lang.String
		}
		if ( vo.getUserPassword() != null && !"".equals(vo.getUserPassword())) {
			builder.and(turnkeyUserProfile.userPassword.containsIgnoreCase(vo.getUserPassword())); //java.lang.String
		}
		if ( vo.getUserId() != null && !"".equals(vo.getUserId())) {
			builder.and(turnkeyUserProfile.userId.containsIgnoreCase(vo.getUserId())); //java.lang.String
		}
		log.debug("TurnkeyUserProfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(turnkeyUserProfileRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<TurnkeyUserProfile> searchLikeVo(TurnkeyUserProfile vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
