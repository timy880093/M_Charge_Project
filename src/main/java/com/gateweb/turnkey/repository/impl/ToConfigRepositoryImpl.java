/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.QToConfig;
import com.gateweb.turnkey.model.ToConfig;
import com.gateweb.turnkey.repository.ToConfigRepository;
import com.gateweb.turnkey.repository.ToConfigRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of ToConfig
 */
//@Repository("toConfigRepositoryCustom")
public class ToConfigRepositoryImpl implements ToConfigRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	ToConfigRepository toConfigRepository;
	
	public ToConfigRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<ToConfig> searchWithVo(ToConfig vo) {
		log.debug("ToConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QToConfig toConfig = QToConfig.toConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(toConfig.routingDescription.equalsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getPartyId() != null && !"".equals(vo.getId().getPartyId())) {
			builder.and(toConfig.id.partyId.equalsIgnoreCase(vo.getId().getPartyId())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getFromPartyId() != null && !"".equals(vo.getId().getFromPartyId())) {
			builder.and(toConfig.id.fromPartyId.equalsIgnoreCase(vo.getId().getFromPartyId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(toConfig.partyDescription.equalsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(toConfig.routingId.equalsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		
		log.debug("ToConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(toConfigRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<ToConfig> searchWithVo(ToConfig vo, Pageable pageable) {
		log.debug("ToConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QToConfig toConfig = QToConfig.toConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(toConfig.routingDescription.equalsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getPartyId() != null && !"".equals(vo.getId().getPartyId())) {
			builder.and(toConfig.id.partyId.equalsIgnoreCase(vo.getId().getPartyId())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getFromPartyId() != null && !"".equals(vo.getId().getFromPartyId())) {
			builder.and(toConfig.id.fromPartyId.equalsIgnoreCase(vo.getId().getFromPartyId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(toConfig.partyDescription.equalsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(toConfig.routingId.equalsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("ToConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(toConfigRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<ToConfig> searchWithVo(ToConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<ToConfig> searchLikeVo(ToConfig vo) {
		log.debug("ToConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QToConfig toConfig = QToConfig.toConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(toConfig.routingDescription.containsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getPartyId() != null && !"".equals(vo.getId().getPartyId())) {
			builder.and(toConfig.id.partyId.containsIgnoreCase(vo.getId().getPartyId())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getFromPartyId() != null && !"".equals(vo.getId().getFromPartyId())) {
			builder.and(toConfig.id.fromPartyId.containsIgnoreCase(vo.getId().getFromPartyId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(toConfig.partyDescription.containsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(toConfig.routingId.containsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("ToConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(toConfigRepository.findAll(builder.getValue()));
	}		

	@SuppressWarnings("unchecked")
	public List<ToConfig> searchLikeVo(ToConfig vo, Pageable pageable) {
		log.debug("ToConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QToConfig toConfig = QToConfig.toConfig;

		if ( vo.getRoutingDescription() != null && !"".equals(vo.getRoutingDescription())) {
			builder.and(toConfig.routingDescription.containsIgnoreCase(vo.getRoutingDescription())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getPartyId() != null && !"".equals(vo.getId().getPartyId())) {
			builder.and(toConfig.id.partyId.containsIgnoreCase(vo.getId().getPartyId())); //java.lang.String
		}
		if (vo.getId() != null &&  vo.getId().getFromPartyId() != null && !"".equals(vo.getId().getFromPartyId())) {
			builder.and(toConfig.id.fromPartyId.containsIgnoreCase(vo.getId().getFromPartyId())); //java.lang.String
		}
		if ( vo.getPartyDescription() != null && !"".equals(vo.getPartyDescription())) {
			builder.and(toConfig.partyDescription.containsIgnoreCase(vo.getPartyDescription())); //java.lang.String
		}
		if ( vo.getRoutingId() != null && !"".equals(vo.getRoutingId())) {
			builder.and(toConfig.routingId.containsIgnoreCase(vo.getRoutingId())); //java.lang.String
		}
		log.debug("ToConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(toConfigRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<ToConfig> searchLikeVo(ToConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
