/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.Archivedfile;
import com.gateweb.turnkey.model.QArchivedfile;
import com.gateweb.turnkey.repository.ArchivedfileRepository;
import com.gateweb.turnkey.repository.ArchivedfileRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of Archivedfile
 */
//@Repository("archivedfileRepositoryCustom")
public class ArchivedfileRepositoryImpl implements ArchivedfileRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	ArchivedfileRepository archivedfileRepository;
	
	public ArchivedfileRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchWithVo(Archivedfile vo) {
		log.debug("ArchivedfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QArchivedfile archivedfile = QArchivedfile.archivedfile;

		if ( vo.getId() != null &&  vo.getId().getFileid() != null && !"".equals(vo.getId().getFileid())) {
			builder.and(archivedfile.id.fileid.equalsIgnoreCase(vo.getId().getFileid())); //java.lang.String
		}
		if ( vo.getId() != null &&  vo.getId().getFiletype() != null && !"".equals(vo.getId().getFiletype())) {
			builder.and(archivedfile.id.filetype.equalsIgnoreCase(vo.getId().getFiletype())); //java.lang.String
		}
		if ( vo.getFilepath() != null && !"".equals(vo.getFilepath())) {
			builder.and(archivedfile.filepath.equalsIgnoreCase(vo.getFilepath())); //java.lang.String
		}
		if ( vo.getMimetype() != null && !"".equals(vo.getMimetype())) {
			builder.and(archivedfile.mimetype.equalsIgnoreCase(vo.getMimetype())); //java.lang.String
		}
		if ( vo.getAttachlength() != null ) {
			builder.and(archivedfile.attachlength.eq(vo.getAttachlength())); //java.lang.Long
		}	
		
		log.debug("ArchivedfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(archivedfileRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchWithVo(Archivedfile vo, Pageable pageable) {
		log.debug("ArchivedfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QArchivedfile archivedfile = QArchivedfile.archivedfile;

		if ( vo.getId() != null &&  vo.getId().getFileid() != null && !"".equals(vo.getId().getFileid())) {
			builder.and(archivedfile.id.fileid.equalsIgnoreCase(vo.getId().getFileid())); //java.lang.String
		}
		if ( vo.getId() != null &&  vo.getId().getFiletype() != null && !"".equals(vo.getId().getFiletype())) {
			builder.and(archivedfile.id.filetype.equalsIgnoreCase(vo.getId().getFiletype())); //java.lang.String
		}
		if ( vo.getFilepath() != null && !"".equals(vo.getFilepath())) {
			builder.and(archivedfile.filepath.equalsIgnoreCase(vo.getFilepath())); //java.lang.String
		}
		if ( vo.getMimetype() != null && !"".equals(vo.getMimetype())) {
			builder.and(archivedfile.mimetype.equalsIgnoreCase(vo.getMimetype())); //java.lang.String
		}
		if ( vo.getAttachlength() != null ) {
			builder.and(archivedfile.attachlength.eq(vo.getAttachlength())); //java.lang.Long
		}	
		
		log.debug("ArchivedfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(archivedfileRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchWithVo(Archivedfile vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchLikeVo(Archivedfile vo) {
		log.debug("ArchivedfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QArchivedfile archivedfile = QArchivedfile.archivedfile;

		if ( vo.getId() != null &&  vo.getId().getFileid() != null && !"".equals(vo.getId().getFileid())) {
			builder.and(archivedfile.id.fileid.containsIgnoreCase(vo.getId().getFileid())); //java.lang.String
		}
		if ( vo.getId() != null &&  vo.getId().getFiletype() != null && !"".equals(vo.getId().getFiletype())) {
			builder.and(archivedfile.id.filetype.containsIgnoreCase(vo.getId().getFiletype())); //java.lang.String
		}
		if ( vo.getFilepath() != null && !"".equals(vo.getFilepath())) {
			builder.and(archivedfile.filepath.containsIgnoreCase(vo.getFilepath())); //java.lang.String
		}
		if ( vo.getMimetype() != null && !"".equals(vo.getMimetype())) {
			builder.and(archivedfile.mimetype.containsIgnoreCase(vo.getMimetype())); //java.lang.String
		}
		if ( vo.getAttachlength() != null ) {
			builder.and(archivedfile.attachlength.eq(vo.getAttachlength())); //java.lang.Long
		}	
		
		log.debug("ArchivedfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(archivedfileRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchLikeVo(Archivedfile vo, Pageable pageable) {
		log.debug("ArchivedfileRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QArchivedfile archivedfile = QArchivedfile.archivedfile;

		if ( vo.getId() != null &&  vo.getId().getFileid() != null && !"".equals(vo.getId().getFileid())) {
			builder.and(archivedfile.id.fileid.containsIgnoreCase(vo.getId().getFileid())); //java.lang.String
		}
		if ( vo.getId() != null &&  vo.getId().getFiletype() != null && !"".equals(vo.getId().getFiletype())) {
			builder.and(archivedfile.id.filetype.containsIgnoreCase(vo.getId().getFiletype())); //java.lang.String
		}
		if ( vo.getFilepath() != null && !"".equals(vo.getFilepath())) {
			builder.and(archivedfile.filepath.containsIgnoreCase(vo.getFilepath())); //java.lang.String
		}
		if ( vo.getMimetype() != null && !"".equals(vo.getMimetype())) {
			builder.and(archivedfile.mimetype.containsIgnoreCase(vo.getMimetype())); //java.lang.String
		}
		if ( vo.getAttachlength() != null ) {
			builder.and(archivedfile.attachlength.eq(vo.getAttachlength())); //java.lang.Long
		}	
		
		log.debug("ArchivedfileRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(archivedfileRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<Archivedfile> searchLikeVo(Archivedfile vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
