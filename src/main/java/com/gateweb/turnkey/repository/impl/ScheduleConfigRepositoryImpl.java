/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.turnkey.model.QScheduleConfig;
import com.gateweb.turnkey.model.ScheduleConfig;
import com.gateweb.turnkey.repository.ScheduleConfigRepository;
import com.gateweb.turnkey.repository.ScheduleConfigRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of ScheduleConfig
 */
//@Repository("scheduleConfigRepositoryCustom")
public class ScheduleConfigRepositoryImpl implements ScheduleConfigRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	ScheduleConfigRepository scheduleConfigRepository;
	
	public ScheduleConfigRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchWithVo(ScheduleConfig vo) {
		log.debug("ScheduleConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QScheduleConfig scheduleConfig = QScheduleConfig.scheduleConfig;

		if ( vo.getTask() != null && !"".equals(vo.getTask())) {
			builder.and(scheduleConfig.task.equalsIgnoreCase(vo.getTask())); //java.lang.String
		}
		if ( vo.getScheduleType() != null && !"".equals(vo.getScheduleType())) {
			builder.and(scheduleConfig.scheduleType.equalsIgnoreCase(vo.getScheduleType())); //java.lang.String
		}
		if ( vo.getScheduleTime() != null && !"".equals(vo.getScheduleTime())) {
			builder.and(scheduleConfig.scheduleTime.equalsIgnoreCase(vo.getScheduleTime())); //java.lang.String
		}
		if ( vo.getEnable() != null && !"".equals(vo.getEnable())) {
			builder.and(scheduleConfig.enable.equalsIgnoreCase(vo.getEnable())); //java.lang.String
		}
		if ( vo.getScheduleRange() != null && !"".equals(vo.getScheduleRange())) {
			builder.and(scheduleConfig.scheduleRange.equalsIgnoreCase(vo.getScheduleRange())); //java.lang.String
		}
		if ( vo.getScheduleWeek() != null && !"".equals(vo.getScheduleWeek())) {
			builder.and(scheduleConfig.scheduleWeek.equalsIgnoreCase(vo.getScheduleWeek())); //java.lang.String
		}
		if ( vo.getSchedulePeriod() != null && !"".equals(vo.getSchedulePeriod())) {
			builder.and(scheduleConfig.schedulePeriod.equalsIgnoreCase(vo.getSchedulePeriod())); //java.lang.String
		}
		log.debug("ScheduleConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(scheduleConfigRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchWithVo(ScheduleConfig vo, Pageable pageable) {
		log.debug("ScheduleConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QScheduleConfig scheduleConfig = QScheduleConfig.scheduleConfig;

		if ( vo.getTask() != null && !"".equals(vo.getTask())) {
			builder.and(scheduleConfig.task.equalsIgnoreCase(vo.getTask())); //java.lang.String
		}
		if ( vo.getScheduleType() != null && !"".equals(vo.getScheduleType())) {
			builder.and(scheduleConfig.scheduleType.equalsIgnoreCase(vo.getScheduleType())); //java.lang.String
		}
		if ( vo.getScheduleTime() != null && !"".equals(vo.getScheduleTime())) {
			builder.and(scheduleConfig.scheduleTime.equalsIgnoreCase(vo.getScheduleTime())); //java.lang.String
		}
		if ( vo.getEnable() != null && !"".equals(vo.getEnable())) {
			builder.and(scheduleConfig.enable.equalsIgnoreCase(vo.getEnable())); //java.lang.String
		}
		if ( vo.getScheduleRange() != null && !"".equals(vo.getScheduleRange())) {
			builder.and(scheduleConfig.scheduleRange.equalsIgnoreCase(vo.getScheduleRange())); //java.lang.String
		}
		if ( vo.getScheduleWeek() != null && !"".equals(vo.getScheduleWeek())) {
			builder.and(scheduleConfig.scheduleWeek.equalsIgnoreCase(vo.getScheduleWeek())); //java.lang.String
		}
		if ( vo.getSchedulePeriod() != null && !"".equals(vo.getSchedulePeriod())) {
			builder.and(scheduleConfig.schedulePeriod.equalsIgnoreCase(vo.getSchedulePeriod())); //java.lang.String
		}
		log.debug("ScheduleConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(scheduleConfigRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchWithVo(ScheduleConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchLikeVo(ScheduleConfig vo) {
		log.debug("ScheduleConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QScheduleConfig scheduleConfig = QScheduleConfig.scheduleConfig;

		if ( vo.getTask() != null && !"".equals(vo.getTask())) {
			builder.and(scheduleConfig.task.containsIgnoreCase(vo.getTask())); //java.lang.String
		}
		if ( vo.getScheduleType() != null && !"".equals(vo.getScheduleType())) {
			builder.and(scheduleConfig.scheduleType.containsIgnoreCase(vo.getScheduleType())); //java.lang.String
		}
		if ( vo.getScheduleTime() != null && !"".equals(vo.getScheduleTime())) {
			builder.and(scheduleConfig.scheduleTime.containsIgnoreCase(vo.getScheduleTime())); //java.lang.String
		}
		if ( vo.getEnable() != null && !"".equals(vo.getEnable())) {
			builder.and(scheduleConfig.enable.containsIgnoreCase(vo.getEnable())); //java.lang.String
		}
		if ( vo.getScheduleRange() != null && !"".equals(vo.getScheduleRange())) {
			builder.and(scheduleConfig.scheduleRange.containsIgnoreCase(vo.getScheduleRange())); //java.lang.String
		}
		if ( vo.getScheduleWeek() != null && !"".equals(vo.getScheduleWeek())) {
			builder.and(scheduleConfig.scheduleWeek.containsIgnoreCase(vo.getScheduleWeek())); //java.lang.String
		}
		if ( vo.getSchedulePeriod() != null && !"".equals(vo.getSchedulePeriod())) {
			builder.and(scheduleConfig.schedulePeriod.containsIgnoreCase(vo.getSchedulePeriod())); //java.lang.String
		}
		log.debug("ScheduleConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(scheduleConfigRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchLikeVo(ScheduleConfig vo, Pageable pageable) {
		log.debug("ScheduleConfigRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QScheduleConfig scheduleConfig = QScheduleConfig.scheduleConfig;

		if ( vo.getTask() != null && !"".equals(vo.getTask())) {
			builder.and(scheduleConfig.task.containsIgnoreCase(vo.getTask())); //java.lang.String
		}
		if ( vo.getScheduleType() != null && !"".equals(vo.getScheduleType())) {
			builder.and(scheduleConfig.scheduleType.containsIgnoreCase(vo.getScheduleType())); //java.lang.String
		}
		if ( vo.getScheduleTime() != null && !"".equals(vo.getScheduleTime())) {
			builder.and(scheduleConfig.scheduleTime.containsIgnoreCase(vo.getScheduleTime())); //java.lang.String
		}
		if ( vo.getEnable() != null && !"".equals(vo.getEnable())) {
			builder.and(scheduleConfig.enable.containsIgnoreCase(vo.getEnable())); //java.lang.String
		}
		if ( vo.getScheduleRange() != null && !"".equals(vo.getScheduleRange())) {
			builder.and(scheduleConfig.scheduleRange.containsIgnoreCase(vo.getScheduleRange())); //java.lang.String
		}
		if ( vo.getScheduleWeek() != null && !"".equals(vo.getScheduleWeek())) {
			builder.and(scheduleConfig.scheduleWeek.containsIgnoreCase(vo.getScheduleWeek())); //java.lang.String
		}
		if ( vo.getSchedulePeriod() != null && !"".equals(vo.getSchedulePeriod())) {
			builder.and(scheduleConfig.schedulePeriod.containsIgnoreCase(vo.getSchedulePeriod())); //java.lang.String
		}
		log.debug("ScheduleConfigRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(scheduleConfigRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<ScheduleConfig> searchLikeVo(ScheduleConfig vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
