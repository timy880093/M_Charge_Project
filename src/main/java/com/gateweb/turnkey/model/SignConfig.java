/*
 * $Header: $
 * This java source file is generated by pkliu on Fri Aug 11 14:13:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.turnkey.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import static javax.persistence.GenerationType.IDENTITY;
import static javax.persistence.GenerationType.AUTO;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import com.meshinnovation.db.model.BaseObject;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 *
 * @author pkliu
 *
 */
@Entity
@Table(name = "sign_config")
public class SignConfig extends BaseObject{

//long serialVersionUID jdk tool: serialver.exe 

	/**
	 * pfx_path
	 */
	@Column(name = "pfx_path")
	protected java.lang.String pfxPath;
	
    /**
     * sign_id java.lang.String , PK     * @GeneratedValue(strategy = GenerationType.AUTO)
     */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "sign_id", unique = true, nullable = false)
	protected java.lang.String signId;
	
	/**
	 * sign_password
	 */
	@Column(name = "sign_password")
	protected java.lang.String signPassword;
	
	/**
	 * sign_type
	 */
	@Column(name = "sign_type")
	protected java.lang.String signType;
	



    
	/**
	 * 002
	 * @return java.lang.String pfxPath
	 */
	public java.lang.String getPfxPath() {
		return this.pfxPath;
	}
	
	/** 0001
	 * @param data Set the pfxPath
	 */	
	public void setPfxPath(java.lang.String data) {
		this.pfxPath = data;
	}	
	/**
	 * 002
	 * @return java.lang.String signId
	 */
	public java.lang.String getSignId() {
		return this.signId;
	}
	
	/** 0001
	 * @param data Set the signId
	 */	
	public void setSignId(java.lang.String data) {
		this.signId = data;    //zzz
	}	
	/**
	 * 002
	 * @return java.lang.String signPassword
	 */
	public java.lang.String getSignPassword() {
		return this.signPassword;
	}
	
	/** 0001
	 * @param data Set the signPassword
	 */	
	public void setSignPassword(java.lang.String data) {
		this.signPassword = data;
	}	
	/**
	 * 002
	 * @return java.lang.String signType
	 */
	public java.lang.String getSignType() {
		return this.signType;
	}
	
	/** 0001
	 * @param data Set the signType
	 */	
	public void setSignType(java.lang.String data) {
		this.signType = data;
	}	



	/**
	 *
	 */
	public SignConfig(){
	}

	/**
	 * full constructor 
	 * @param pfxPath 
	 * @param signId 
	 * @param signPassword 
	 * @param signType 
	 */
	public SignConfig (
		 java.lang.String pfxPath 
		, java.lang.String signId 
		, java.lang.String signPassword 
		, java.lang.String signType 
        ) {
		this.setPfxPath(pfxPath);
		this.setSignId(signId);
		this.setSignPassword(signPassword);
		this.setSignType(signType);
    }

	
	@Override
	public int hashCode() {
		return HashCodeBuilder.reflectionHashCode(this);
	}

	@Override
	public String toString() {
		 //return ToStringBuilder.reflectionToString(this , ToStringStyle.MULTI_LINE_STYLE);  
		 return new ToStringBuilder(this)
		.append("pfxPath", this.pfxPath)
		.append("signId", this.signId)
		.append("signPassword", this.signPassword)
		.append("signType", this.signType)
		.toString();
	}	 

	/*
    @Override
	public boolean equals(Object object) {
		if (object == null || !(object instanceof SignConfig))
			return false;
		EqualsBuilder builder = new EqualsBuilder();
		builder.append(this.id, ((SignConfig) object).id);
		return builder.isEquals();
	}*/
	
	/**
	 * Indicates whether some other object is "equal to" this one.
	 * @return true is equal, false is not equal
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;

		if (obj == null || !(obj instanceof SignConfig))
			return false;

		SignConfig key = (SignConfig) obj;
		if (this.signId != key.signId ) 
        	return false;

		return true;
    }

}