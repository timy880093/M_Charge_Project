/*
 * This file is generated by jOOQ.
 */
package com.gateweb.orm.charge.entity.view;


import com.gateweb.charge.enumeration.BillStatus;
import com.gateweb.orm.hibernateExtension.PostgreSQLEnumType;
import com.gateweb.orm.charge.entity.FinancialTransaction;
import com.gateweb.orm.charge.entity.Notice;
import org.hibernate.annotations.*;
import org.hibernate.annotations.CascadeType;

import javax.annotation.Generated;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.9"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "bill", schema = "public", indexes = {
        @Index(name = "bill_pkey", unique = true, columnList = "bill_id ASC")
})
@TypeDef(
        name = "pgsql_enum",
        typeClass = PostgreSQLEnumType.class
)
@Immutable
public class BillFetchView implements Serializable {

    private static final long serialVersionUID = -1010877921;

    private Long billId;
    private SimpleCompanyFetchView company;
    private BigDecimal taxRate;
    private BigDecimal taxAmount;
    private BigDecimal taxExcludedAmount;
    private BigDecimal taxIncludedAmount;
    private BillStatus billStatus;
    private String billRemark;
    private String billYm;
    private String paymentRemark;
    private String paymentMethod;
    private Integer actualReceived;
    private String bankCode;
    private Timestamp outToBankDate;
    private Boolean twTax;
    private SimpleUserView creator;
    private Timestamp createDate;
    private Timestamp paidDate;
    private List<FinancialTransaction> financialTransactionList;
    private List<BillingItemFetchView> billingItemList;
    private List<DeductHistoryFetchView> deductHistoryList;
    private List<Notice> noticeList;

    public BillFetchView() {
    }

    public BillFetchView(Long billId, SimpleCompanyFetchView company, BigDecimal taxRate, BigDecimal taxAmount, BigDecimal taxExcludedAmount, BigDecimal taxIncludedAmount, BillStatus billStatus, String billRemark, String billYm, String paymentRemark, String paymentMethod, Integer actualReceived, String bankCode, Timestamp outToBankDate, Boolean twTax, SimpleUserView creator, Timestamp createDate, Timestamp paidDate, List<FinancialTransaction> financialTransactionList, List<BillingItemFetchView> billingItemList, List<DeductHistoryFetchView> deductHistoryList, List<Notice> noticeList) {
        this.billId = billId;
        this.company = company;
        this.taxRate = taxRate;
        this.taxAmount = taxAmount;
        this.taxExcludedAmount = taxExcludedAmount;
        this.taxIncludedAmount = taxIncludedAmount;
        this.billStatus = billStatus;
        this.billRemark = billRemark;
        this.billYm = billYm;
        this.paymentRemark = paymentRemark;
        this.paymentMethod = paymentMethod;
        this.actualReceived = actualReceived;
        this.bankCode = bankCode;
        this.outToBankDate = outToBankDate;
        this.twTax = twTax;
        this.creator = creator;
        this.createDate = createDate;
        this.paidDate = paidDate;
        this.financialTransactionList = financialTransactionList;
        this.billingItemList = billingItemList;
        this.deductHistoryList = deductHistoryList;
        this.noticeList = noticeList;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "bill_id", unique = true, nullable = false, precision = 64)
    public Long getBillId() {
        return this.billId;
    }

    public void setBillId(Long billId) {
        this.billId = billId;
    }

    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "company_id")
    public SimpleCompanyFetchView getCompany() {
        return company;
    }

    public void setCompany(SimpleCompanyFetchView company) {
        this.company = company;
    }

    @Column(name = "tax_rate", precision = 4, scale = 3)
    public BigDecimal getTaxRate() {
        return this.taxRate;
    }

    public void setTaxRate(BigDecimal taxRate) {
        this.taxRate = taxRate;
    }

    @Column(name = "tax_amount", precision = 13, scale = 4)
    public BigDecimal getTaxAmount() {
        return this.taxAmount;
    }

    public void setTaxAmount(BigDecimal taxAmount) {
        this.taxAmount = taxAmount;
    }

    @Column(name = "tax_excluded_amount", precision = 23, scale = 4)
    public BigDecimal getTaxExcludedAmount() {
        return this.taxExcludedAmount;
    }

    public void setTaxExcludedAmount(BigDecimal taxExcludedAmount) {
        this.taxExcludedAmount = taxExcludedAmount;
    }

    @Column(name = "tax_included_amount", precision = 23, scale = 4)
    public BigDecimal getTaxIncludedAmount() {
        return this.taxIncludedAmount;
    }

    public void setTaxIncludedAmount(BigDecimal taxIncludedAmount) {
        this.taxIncludedAmount = taxIncludedAmount;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "bill_status")
    @Type(type = "pgsql_enum")
    public BillStatus getBillStatus() {
        return this.billStatus;
    }

    public void setBillStatus(BillStatus billStatus) {
        this.billStatus = billStatus;
    }

    @Column(name = "bank_code", length = 20)
    @Size(max = 20)
    public String getBankCode() {
        return this.bankCode;
    }

    public void setBankCode(String bankCode) {
        this.bankCode = bankCode;
    }

    @Column(name = "out_to_bank_date", nullable = false)
    public Timestamp getOutToBankDate() {
        return this.outToBankDate;
    }

    public void setOutToBankDate(Timestamp outToBankDate) {
        this.outToBankDate = outToBankDate;
    }

    @Column(name = "tw_tax")
    public Boolean getTwTax() {
        return this.twTax;
    }

    public void setTwTax(Boolean twTax) {
        this.twTax = twTax;
    }

    @OneToOne
    @JoinColumn(name = "creator_id")
    @Fetch(FetchMode.JOIN)
    @Cascade(CascadeType.DETACH)
    @BatchSize(size = 10)
    @NotNull
    public SimpleUserView getCreator() {
        return creator;
    }

    public void setCreator(SimpleUserView creator) {
        this.creator = creator;
    }

    @Column(name = "create_date", nullable = false)
    @NotNull
    public Timestamp getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Timestamp createDate) {
        this.createDate = createDate;
    }

    @OneToMany(fetch = FetchType.EAGER)
    @JoinColumn(name = "bill_id", referencedColumnName = "bill_id")
    @Fetch(FetchMode.SUBSELECT)
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    @BatchSize(size = 10)
    public List<FinancialTransaction> getFinancialTransactionList() {
        return financialTransactionList;
    }

    public void setFinancialTransactionList(List<FinancialTransaction> financialTransactionList) {
        this.financialTransactionList = financialTransactionList;
    }

    @OneToMany(fetch = FetchType.EAGER)
    @JoinColumn(name = "bill_id", referencedColumnName = "bill_id")
    @Fetch(FetchMode.JOIN)
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    @BatchSize(size = 10)
    public List<BillingItemFetchView> getBillingItemList() {
        return billingItemList;
    }

    public void setBillingItemList(List<BillingItemFetchView> billingItemList) {
        this.billingItemList = billingItemList;
    }

    @OneToMany(fetch = FetchType.EAGER)
    @JoinColumn(name = "bill_id", referencedColumnName = "bill_id")
    @Fetch(FetchMode.SUBSELECT)
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    @BatchSize(size = 10)
    public List<DeductHistoryFetchView> getDeductHistoryList() {
        return deductHistoryList;
    }

    public void setDeductHistoryList(List<DeductHistoryFetchView> deductHistoryList) {
        this.deductHistoryList = deductHistoryList;
    }

    @OneToMany(fetch = FetchType.EAGER)
    @JoinColumns({
            @JoinColumn(updatable = false, insertable = false, name = "bill_id", referencedColumnName = "bill_id")
    })
    @Fetch(FetchMode.SUBSELECT)
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    @BatchSize(size = 10)
    public List<Notice> getNoticeList() {
        return noticeList;
    }

    public void setNoticeList(List<Notice> noticeList) {
        this.noticeList = noticeList;
    }

    @Column(name = "paid_date")
    public Timestamp getPaidDate() {
        return paidDate;
    }

    public void setPaidDate(Timestamp paidDate) {
        this.paidDate = paidDate;
    }

    @Column(name = "bill_remark", length = 200)
    @Size(max = 200)
    public String getBillRemark() {
        return this.billRemark;
    }

    public void setBillRemark(String billRemark) {
        this.billRemark = billRemark;
    }

    @Column(name = "payment_remark", length = 200)
    @Size(max = 200)
    public String getPaymentRemark() {
        return this.paymentRemark;
    }

    public void setPaymentRemark(String paymentRemark) {
        this.paymentRemark = paymentRemark;
    }

    @Column(name = "actual_received", precision = 32)
    public Integer getActualReceived() {
        return this.actualReceived;
    }

    public void setActualReceived(Integer actualReceived) {
        this.actualReceived = actualReceived;
    }

    @Column(name = "payment_method", length = 30)
    @Size(max = 30)
    public String getPaymentMethod() {
        return this.paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    @Column(name = "bill_ym", length = 8)
    public String getBillYm() {
        return billYm;
    }

    public void setBillYm(String billYm) {
        this.billYm = billYm;
    }
    
    @Override
    public String toString() {
        return "BillFetchView{" +
                "billId=" + billId +
                ", company=" + company +
                ", taxRate=" + taxRate +
                ", taxAmount=" + taxAmount +
                ", taxExcludedAmount=" + taxExcludedAmount +
                ", taxIncludedAmount=" + taxIncludedAmount +
                ", billStatus=" + billStatus +
                ", billRemark='" + billRemark + '\'' +
                ", billYm='" + billYm + '\'' +
                ", paymentRemark='" + paymentRemark + '\'' +
                ", paymentMethod='" + paymentMethod + '\'' +
                ", actualReceived=" + actualReceived +
                ", bankCode='" + bankCode + '\'' +
                ", outToBankDate=" + outToBankDate +
                ", twTax=" + twTax +
                ", creator=" + creator +
                ", createDate=" + createDate +
                ", paidDate=" + paidDate +
                ", financialTransactionList=" + financialTransactionList +
                ", billingItemList=" + billingItemList +
                ", deductHistoryList=" + deductHistoryList +
                ", noticeList=" + noticeList +
                '}';
    }
}
