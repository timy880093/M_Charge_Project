/*
 * This file is generated by jOOQ.
 */
package com.gateweb.orm.charge.entity.view;


import com.gateweb.charge.enumeration.ChargeBaseType;
import com.gateweb.charge.enumeration.DeductStatus;
import com.gateweb.charge.enumeration.DeductType;
import com.gateweb.orm.charge.entity.Contract;
import com.gateweb.orm.charge.entity.ProductCategory;
import org.hibernate.annotations.BatchSize;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import javax.persistence.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
@Entity
@Table(name = "deduct", schema = "public", uniqueConstraints = {
        @UniqueConstraint(name = "deduct_pkey", columnNames = {"deduct_id"})
})
public class DeductFetchView implements Serializable {

    private static final long serialVersionUID = -1665665240;

    private Long deductId;
    private DeductType deductType;
    private DeductStatus deductStatus;
    private ChargeBaseType chargeBaseType;
    private BigDecimal quota;
    private Boolean deductByFee;
    private BigDecimal salesPrice;
    private LocalDateTime effectiveDate;
    private LocalDateTime expirationDate;
    private Long creatorId;
    private LocalDateTime createDate;
    private Long modifierId;
    private LocalDateTime modifyDate;
    private SimpleCompanyFetchView company;
    private Contract contract;
    private ProductFetchView product;
    private PackageRefFetchView packageRef;
    private ProductCategory targetProductCategory;
    private List<DeductHistoryFetchView> deductHistoryList = new ArrayList<>();

    public DeductFetchView() {
    }

    public DeductFetchView(Long deductId, DeductType deductType, DeductStatus deductStatus, ChargeBaseType chargeBaseType, BigDecimal quota, Boolean deductByFee, BigDecimal salesPrice, LocalDateTime effectiveDate, LocalDateTime expirationDate, Long creatorId, LocalDateTime createDate, Long modifierId, LocalDateTime modifyDate, SimpleCompanyFetchView company, Contract contract, ProductFetchView product, PackageRefFetchView packageRef, ProductCategory targetProductCategory, List<DeductHistoryFetchView> deductHistoryList) {
        this.deductId = deductId;
        this.deductType = deductType;
        this.deductStatus = deductStatus;
        this.chargeBaseType = chargeBaseType;
        this.quota = quota;
        this.deductByFee = deductByFee;
        this.salesPrice = salesPrice;
        this.effectiveDate = effectiveDate;
        this.expirationDate = expirationDate;
        this.creatorId = creatorId;
        this.createDate = createDate;
        this.modifierId = modifierId;
        this.modifyDate = modifyDate;
        this.company = company;
        this.contract = contract;
        this.product = product;
        this.packageRef = packageRef;
        this.targetProductCategory = targetProductCategory;
        this.deductHistoryList = deductHistoryList;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "deduct_id", nullable = false, precision = 64)
    public Long getDeductId() {
        return this.deductId;
    }

    public void setDeductId(Long deductId) {
        this.deductId = deductId;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "deduct_type")
    public DeductType getDeductType() {
        return this.deductType;
    }

    public void setDeductType(DeductType deductType) {
        this.deductType = deductType;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "deduct_status")
    public DeductStatus getDeductStatus() {
        return this.deductStatus;
    }

    public void setDeductStatus(DeductStatus deductStatus) {
        this.deductStatus = deductStatus;
    }

    @Column(name = "quota", precision = 23, scale = 4)
    public BigDecimal getQuota() {
        return quota;
    }

    public void setQuota(BigDecimal quota) {
        this.quota = quota;
    }

    @Column(name = "deduct_by_fee")
    public Boolean getDeductByFee() {
        return this.deductByFee;
    }

    public void setDeductByFee(Boolean deductByFee) {
        this.deductByFee = deductByFee;
    }

    @Column(name = "sales_price", precision = 23, scale = 4)
    public BigDecimal getSalesPrice() {
        return this.salesPrice;
    }

    public void setSalesPrice(BigDecimal salesPrice) {
        this.salesPrice = salesPrice;
    }

    @Column(name = "effective_date")
    public LocalDateTime getEffectiveDate() {
        return this.effectiveDate;
    }

    public void setEffectiveDate(LocalDateTime effectiveDate) {
        this.effectiveDate = effectiveDate;
    }

    @Column(name = "expiration_date")
    public LocalDateTime getExpirationDate() {
        return this.expirationDate;
    }

    public void setExpirationDate(LocalDateTime expirationDate) {
        this.expirationDate = expirationDate;
    }

    @Column(name = "creator_id", precision = 64)
    public Long getCreatorId() {
        return this.creatorId;
    }

    public void setCreatorId(Long creatorId) {
        this.creatorId = creatorId;
    }

    @Column(name = "create_date")
    public LocalDateTime getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }

    @Column(name = "modifier_id", precision = 64)
    public Long getModifierId() {
        return this.modifierId;
    }

    public void setModifierId(Long modifierId) {
        this.modifierId = modifierId;
    }

    @Column(name = "modify_date")
    public LocalDateTime getModifyDate() {
        return this.modifyDate;
    }

    public void setModifyDate(LocalDateTime modifyDate) {
        this.modifyDate = modifyDate;
    }

    @OneToMany(fetch = FetchType.EAGER, orphanRemoval = true)
    @Fetch(FetchMode.JOIN)
    @JoinColumn(name = "deduct_id", referencedColumnName = "deduct_id")
    @BatchSize(size = 10)
    public List<DeductHistoryFetchView> getDeductHistoryList() {
        return deductHistoryList;
    }

    public void setDeductHistoryList(List<DeductHistoryFetchView> deductHistoryList) {
        this.deductHistoryList = deductHistoryList;
    }

    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "company_id")
    public SimpleCompanyFetchView getCompany() {
        return company;
    }

    public void setCompany(SimpleCompanyFetchView company) {
        this.company = company;
    }

    //為了leftjoin
    //詳情請看這篇文：https://thorben-janssen.com/hibernate-tips-how-to-map-the-latest-element-of-an-association/
    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "contract_id")
    public Contract getContract() {
        return contract;
    }

    public void setContract(Contract contract) {
        this.contract = contract;
    }

    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "product_id")
    public ProductFetchView getProduct() {
        return product;
    }

    public void setProduct(ProductFetchView product) {
        this.product = product;
    }

    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "package_ref_id")
    public PackageRefFetchView getPackageRef() {
        return packageRef;
    }

    public void setPackageRef(PackageRefFetchView packageRef) {
        this.packageRef = packageRef;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "charge_base_type")
    public ChargeBaseType getChargeBaseType() {
        return chargeBaseType;
    }

    public void setChargeBaseType(ChargeBaseType chargeBaseType) {
        this.chargeBaseType = chargeBaseType;
    }

    @ManyToOne(cascade = javax.persistence.CascadeType.ALL)
    @JoinColumn(name = "target_product_category_id")
    public ProductCategory getTargetProductCategory() {
        return targetProductCategory;
    }

    public void setTargetProductCategory(ProductCategory targetProductCategory) {
        this.targetProductCategory = targetProductCategory;
    }

    @Override
    public String toString() {
        return "DeductFetchView{" +
                "deductId=" + deductId +
                ", deductType=" + deductType +
                ", deductStatus=" + deductStatus +
                ", chargeBaseType=" + chargeBaseType +
                ", quota=" + quota +
                ", deductByFee=" + deductByFee +
                ", salesPrice=" + salesPrice +
                ", effectiveDate=" + effectiveDate +
                ", expirationDate=" + expirationDate +
                ", creatorId=" + creatorId +
                ", createDate=" + createDate +
                ", modifierId=" + modifierId +
                ", modifyDate=" + modifyDate +
                ", company=" + company +
                ", contract=" + contract +
                ", product=" + product +
                ", packageRef=" + packageRef +
                ", targetProductCategory=" + targetProductCategory +
                ", deductHistoryList=" + deductHistoryList +
                '}';
    }
}
