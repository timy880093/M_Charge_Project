/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.orm.charge.repository;

import com.gateweb.orm.charge.entity.Company;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;
import org.springframework.stereotype.Repository;

import java.sql.Timestamp;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;

/**
 * @author pkliu
 * <p>
 * This class provides methods to populate DB Table of Company
 */
@Repository("company")
public interface CompanyRepository extends JpaRepository<Company, Integer>
        , QuerydslPredicateExecutor<Company> {

    @Query(
            value = "SELECT *\n" +
                    "FROM company\n" +
                    "WHERE company_id IN (\n" +
                    "\t\tSELECT DISTINCT company_id\n" +
                    "\t\tFROM contract\n" +
                    "\t\tWHERE expiration_date > current_timestamp\n" +
                    "\t\t)\n",
            nativeQuery = true)
    List<Company> findNotExpireContractCompanyList();

    Optional<Company> findByCompanyId(Integer companyId);

    public List<Company> findByVerifyStatusIsIn(List<Integer> statusList);

    public List<Company> findByModifyDateGreaterThan(Timestamp timestamp);

    @Query(value = "select create_date from company order by modify_date desc limit 1 ", nativeQuery = true)
    public Timestamp getLastCreateDate();

    public List<Company> findByVerifyStatusIs(Integer verifyStatus);

    public Optional<Company> findByBusinessNo(String businessNo);

    @Query(value = "SELECT *\n" +
            "FROM company\n" +
            "WHERE company_id IN (\n" +
            "\t\tSELECT company_id\n" +
            "\t\tFROM payment_reference\n" +
            "\t\tWHERE payment_type = 'AUTOMATIC'\n" +
            "\t\t\tAND payment_method = 'SCSB_CONVENIENT_STORE'\n" +
            "\t\t)\n", nativeQuery = true)
    List<Company> findNeedScsbConvenientStoreReport();

    /**
     * 為了解決超額計算時花太多時間處理不需要處理的公司的問題
     * 至少要過濾沒有方案的公司，不然計算時間過長
     *
     * @param yearMonth
     * @return
     */
    @Query(value = "SELECT com.* \n" +
            "FROM company com\n" +
            "JOIN bill_cycle bc ON (\n" +
            "\t\tcom.company_id = bc.company_id\n" +
            "\t\tAND bc.year_month = ?1 \n" +
            "\t\tAND STATUS = '1'\n" +
            "\t\t)\n" +
            "ORDER BY bc.cnt DESC\n"
            , nativeQuery = true)
    List<Company> findNeedToBeCalculateCompanyList(String yearMonth);

    @Query(value = "SELECT com.* \n" +
            "FROM company com\n" +
            "JOIN bill_cycle bc ON (\n" +
            "\t\tcom.company_id = bc.company_id\n" +
            "\t\tAND STATUS = '1'\n" +
            "\t\t)\n" +
            "ORDER BY bc.cnt DESC\n"
            , nativeQuery = true)
    List<Company> findNeedToBeCalculateCompanyList();

    @Query(value =
            "select com.* from company com where com.verify_status !=9 ", nativeQuery = true)
    List<Company> findEnabledCompanyList();

    /**
     * 新的公司查詢方法
     *
     * @return
     */
    @Query(value = "SELECT DISTINCT com.*\n" +
            "FROM company com\n" +
            "JOIN contract con ON (con.company_id = com.company_id)\n" +
            "WHERE com.verify_status = 3 \n" +
            "\tAND (\n" +
            "\t\tcontract_id IS NOT NULL\n" +
            "\t\t)\n", nativeQuery = true)
    Collection<Company> findBillableCompanyByContract();

    /**
     * 舊的公司查詢方法
     *
     * @return
     */
    @Query(value = "SELECT DISTINCT com.*\n" +
            "FROM company com\n" +
            "JOIN bill_cycle bc ON (bc.company_id = com.company_id)\n" +
            "WHERE com.verify_status = 3 \n" +
            "\tAND bill_id IS NOT NULL\n", nativeQuery = true)
    Collection<Company> findBillableCompanyByBillCycle();

    /**
     * 區分新舊的billableContract定義
     *
     * @return
     */
    @Query(value = "SELECT DISTINCT com.business_no\n" +
            "FROM company com\n" +
            "JOIN contract con ON (con.company_id = com.company_id)\n" +
            "WHERE com.verify_status = 3 \n" +
            "\tAND (\n" +
            "\t\tcontract_id IS NOT NULL\n" +
            "\t\t)\n", nativeQuery = true)
    Set<String> findBillableBusinessNoByContract();

    /**
     * 區分新舊的billableContract定義
     *
     * @return
     */
    @Query(value = "SELECT DISTINCT com.business_no\n" +
            "FROM company com\n" +
            "JOIN bill_cycle bc ON (bc.company_id = com.company_id)\n" +
            "WHERE com.verify_status = 3 \n" +
            "\tAND bill_id IS NOT NULL\n", nativeQuery = true)
    Set<String> findBillableBusinessNoByBillCycle();

    @Query(value = "SELECT DISTINCT com.* " +
            "FROM contract con " +
            "JOIN company com on (com.company_id = con.company_id) " +
            "JOIN package_ref pr ON (pr.from_package_id = con.package_id) " +
            "JOIN charge_rule cr ON (pr.to_charge_rule_id = cr.charge_rule_id) " +
            "WHERE cr.charge_by_remaining_count = true ", nativeQuery = true)
    Set<Company> findBillableChargeByRemainingCountCompanyIdList();

}

	