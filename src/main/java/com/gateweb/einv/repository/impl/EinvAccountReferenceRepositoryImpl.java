/*
 * $Header: $
 * This java source file is generated by pkliu on Thu Aug 03 11:22:57 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.einv.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.einv.model.AccountReference;
import com.gateweb.einv.model.QAccountReference;
import com.gateweb.einv.repository.EinvAccountReferenceRepository;
import com.gateweb.einv.repository.EinvAccountReferenceRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of AccountReference
 */
//@Repository("accountReferenceRepositoryCustom")
public class EinvAccountReferenceRepositoryImpl implements EinvAccountReferenceRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	EinvAccountReferenceRepository einvAccountReferenceRepository;
	
	public EinvAccountReferenceRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<AccountReference> searchWithVo(AccountReference vo) {
		log.debug("AccountReference2RepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QAccountReference accountReference = QAccountReference.accountReference;

		
		if ( vo.getCompanyId() != null ) {
			builder.and(accountReference.companyId.eq(vo.getCompanyId())); //java.lang.Long
		}	
		
		if ( vo.getReferenceId() != null ) {
			builder.and(accountReference.referenceId.eq(vo.getReferenceId())); //java.lang.Long
		}	
		
		if ( vo.getUserId() != null ) {
			builder.and(accountReference.userId.eq(vo.getUserId())); //java.lang.Long
		}	
		
		log.debug("AccountReference2RepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(einvAccountReferenceRepository.findAll(builder.getValue()));
	}
	
	@SuppressWarnings("unchecked")
	public List<AccountReference> searchWithVo(AccountReference vo, Pageable pageable) {
		log.debug("AccountReference2RepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QAccountReference accountReference = QAccountReference.accountReference;

		
		if ( vo.getCompanyId() != null ) {
			builder.and(accountReference.companyId.eq(vo.getCompanyId())); //java.lang.Long
		}	
		
		if ( vo.getReferenceId() != null ) {
			builder.and(accountReference.referenceId.eq(vo.getReferenceId())); //java.lang.Long
		}	
		
		if ( vo.getUserId() != null ) {
			builder.and(accountReference.userId.eq(vo.getUserId())); //java.lang.Long
		}	
		
		log.debug("AccountReference2RepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(einvAccountReferenceRepository.findAll(builder.getValue(), pageable));
	}
	
	@SuppressWarnings("unchecked")
	public List<AccountReference> searchWithVo(AccountReference vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<AccountReference> searchLikeVo(AccountReference vo) {
		log.debug("AccountReference2RepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QAccountReference accountReference = QAccountReference.accountReference;

		
		if ( vo.getCompanyId() != null ) {
			builder.and(accountReference.companyId.eq(vo.getCompanyId())); //java.lang.Long
		}	
		
		if ( vo.getReferenceId() != null ) {
			builder.and(accountReference.referenceId.eq(vo.getReferenceId())); //java.lang.Long
		}	
		
		if ( vo.getUserId() != null ) {
			builder.and(accountReference.userId.eq(vo.getUserId())); //java.lang.Long
		}	
		
		log.debug("AccountReference2RepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(einvAccountReferenceRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<AccountReference> searchLikeVo(AccountReference vo, Pageable pageable) {
		log.debug("AccountReference2RepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QAccountReference accountReference = QAccountReference.accountReference;

		
		if ( vo.getCompanyId() != null ) {
			builder.and(accountReference.companyId.eq(vo.getCompanyId())); //java.lang.Long
		}	
		
		if ( vo.getReferenceId() != null ) {
			builder.and(accountReference.referenceId.eq(vo.getReferenceId())); //java.lang.Long
		}	
		
		if ( vo.getUserId() != null ) {
			builder.and(accountReference.userId.eq(vo.getUserId())); //java.lang.Long
		}	
		
		log.debug("AccountReference2RepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(einvAccountReferenceRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<AccountReference> searchLikeVo(AccountReference vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
