/*
 * $Header: $
 * This java source file is generated by pkliu on Mon Oct 30 14:37:48 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;
import javax.persistence.TransactionRequiredException;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.springframework.stereotype.Repository;

import com.gateweb.charge.dao.InvoiceMainUniqueDao;
import com.gateweb.charge.model.InvoiceMainUniqueEntity;
import com.gateweb.charge.model.InvoiceMainUniqueEntityPK;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of InvoiceMainUnique
 */
@Repository("invoiceMainUnique")
public class JpaInvoiceMainUniqueDaoImpl extends JpaGenericDaoImpl<InvoiceMainUniqueEntity,  InvoiceMainUniqueEntityPK   >  implements InvoiceMainUniqueDao{

	/**
	 *
	 */
	public JpaInvoiceMainUniqueDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
    */
	public void delete(
					InvoiceMainUniqueEntityPK id						) {
		logger.debug("JpaInvoiceMainUniqueDaoImpl delete  begin "
					);	
		try {
			Object data = entityManager.find(InvoiceMainUniqueEntity.class
					,id	);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<InvoiceMainUniqueEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from InvoiceMainUniqueEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from InvoiceMainUniqueEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaInvoiceMainUniqueDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchBy(InvoiceMainUniqueEntity data) {
		StringBuffer sb = new StringBuffer("select obj from InvoiceMainUniqueEntity obj where 1=1 ");

		if ( data.getId().getYearMonth() != null ) {
			sb.append(" AND obj.yearMonth = :yearMonth "); //java.lang.String
		}
		if ( data.getCompanyId() != null ) {
			sb.append(" AND obj.companyId = :companyId "); //java.lang.Integer
		}
		if ( data.getInvoiceType() != null ) {
			sb.append(" AND obj.invoiceType = :invoiceType "); //java.lang.String
		}
		if ( data.getId().getInvoiceNumber() != null ) {
			sb.append(" AND obj.invoiceNumber = :invoiceNumber "); //java.lang.String
		}
		Query q;
		List<InvoiceMainUniqueEntity> results;
		try {
			logger.debug("JpaInvoiceMainUniqueDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getId().getYearMonth() != null ) {
			q.setParameter("yearMonth", data.getId().getYearMonth());
		}
		if ( data.getCompanyId() != null ) {
			q.setParameter("companyId", data.getCompanyId());
		}
		if ( data.getInvoiceType() != null ) {
			q.setParameter("invoiceType", data.getInvoiceType());
		}
		if ( data.getId().getInvoiceNumber() != null ) {
			q.setParameter("invoiceNumber", data.getId().getInvoiceNumber());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchLike(InvoiceMainUniqueEntity data) {
		StringBuffer sb = new StringBuffer("select obj from InvoiceMainUniqueEntity obj where 1=1 ");
		if ( data.getId().getYearMonth() != null && !"".equals(data.getId().getYearMonth())) {
			sb.append(" AND obj.yearMonth Like :yearMonth "); //java.lang.String
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId())) {
			sb.append(" AND obj.companyId Like :companyId "); //java.lang.Integer
		}
		if ( data.getInvoiceType() != null && !"".equals(data.getInvoiceType())) {
			sb.append(" AND obj.invoiceType Like :invoiceType "); //java.lang.String
		}
		if ( data.getId().getInvoiceNumber() != null && !"".equals(data.getId().getInvoiceNumber())) {
			sb.append(" AND obj.invoiceNumber Like :invoiceNumber "); //java.lang.String
		}
		Query q;
		List<InvoiceMainUniqueEntity> results;
		try {
			logger.debug("JpaInvoiceMainUniqueDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getId().getYearMonth() != null && !"".equals(data.getId().getYearMonth()) ) {
			q.setParameter("yearMonth", data.getId().getYearMonth()+"%");
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId()) ) {
			q.setParameter("companyId", data.getCompanyId()+"%");
		}
		if ( data.getInvoiceType() != null && !"".equals(data.getInvoiceType()) ) {
			q.setParameter("invoiceType", data.getInvoiceType()+"%");
		}
		if ( data.getId().getInvoiceNumber() != null && !"".equals(data.getId().getInvoiceNumber()) ) {
			q.setParameter("invoiceNumber", data.getId().getInvoiceNumber()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}

	
}
