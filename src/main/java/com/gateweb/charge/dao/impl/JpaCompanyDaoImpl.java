/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of Company
 */
@Repository("company")
public class JpaCompanyDaoImpl extends JpaGenericDaoImpl<CompanyEntity,               java.lang.Integer                 >  implements CompanyDao{

	/**
	 *
	 */
	public JpaCompanyDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param companyId   PK 
    */
	public void delete(
																										 java.lang.Integer companyId 
																																	) {
		logger.debug("JpaCompanyDaoImpl delete  begin "
			+"id="+companyId
		);	
		try {
			Object data = entityManager.find(CompanyEntity.class
			, companyId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<CompanyEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<CompanyEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from CompanyEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<CompanyEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from CompanyEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaCompanyDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<CompanyEntity> searchBy(CompanyEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CompanyEntity obj where 1=1 ");

		if ( data.getCompanyType() != null ) {
			sb.append(" AND obj.companyType = :companyType "); //java.lang.Integer
		}
		if ( data.getCodeName() != null ) {
			sb.append(" AND obj.codeName = :codeName "); //java.lang.String
		}
		if ( data.getCompanyAddress() != null ) {
			sb.append(" AND obj.companyAddress = :companyAddress "); //java.lang.String
		}
		if ( data.getEmail2() != null ) {
			sb.append(" AND obj.email2 = :email2 "); //java.lang.String
		}
		if ( data.getEmail1() != null ) {
			sb.append(" AND obj.email1 = :email1 "); //java.lang.String
		}
		if ( data.getTaxNo() != null ) {
			sb.append(" AND obj.taxNo = :taxNo "); //java.lang.String
		}
		if ( data.getContactPhone1() != null ) {
			sb.append(" AND obj.contactPhone1 = :contactPhone1 "); //java.lang.String
		}
		if ( data.getContactPhone2() != null ) {
			sb.append(" AND obj.contactPhone2 = :contactPhone2 "); //java.lang.String
		}
		if ( data.getBottomBanner() != null ) {
			sb.append(" AND obj.bottomBanner = :bottomBanner "); //java.lang.String
		}
		if ( data.getVerifyStatus() != null ) {
			sb.append(" AND obj.verifyStatus = :verifyStatus "); //java.lang.Integer
		}
		if ( data.getFax() != null ) {
			sb.append(" AND obj.fax = :fax "); //java.lang.String
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getCompanyId() != null ) {
			sb.append(" AND obj.companyId = :companyId "); //java.lang.Integer
		}
		if ( data.getBusinessNo() != null ) {
			sb.append(" AND obj.businessNo = :businessNo "); //java.lang.String
		}
		if ( data.getCompanyKey() != null ) {
			sb.append(" AND obj.companyKey = :companyKey "); //java.lang.String
		}
		if ( data.getMailingAddress() != null ) {
			sb.append(" AND obj.mailingAddress = :mailingAddress "); //java.lang.String
		}
		if ( data.getPhone() != null ) {
			sb.append(" AND obj.phone = :phone "); //java.lang.String
		}
		if ( data.getParentId() != null ) {
			sb.append(" AND obj.parentId = :parentId "); //java.lang.Integer
		}
		if ( data.getName() != null ) {
			sb.append(" AND obj.name = :name "); //java.lang.String
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getTaxOffice() != null ) {
			sb.append(" AND obj.taxOffice = :taxOffice "); //java.lang.String
		}
		if ( data.getTopBanner() != null ) {
			sb.append(" AND obj.topBanner = :topBanner "); //java.lang.String
		}
		if ( data.getTransferType() != null ) {
			sb.append(" AND obj.transferType = :transferType "); //java.lang.Integer
		}
		if ( data.getContact1() != null ) {
			sb.append(" AND obj.contact1 = :contact1 "); //java.lang.String
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getPrintServiceType() != null ) {
			sb.append(" AND obj.printServiceType = :printServiceType "); //java.lang.Integer
		}
		if ( data.getContact2() != null ) {
			sb.append(" AND obj.contact2 = :contact2 "); //java.lang.String
		}
		if ( data.getCityId() != null ) {
			sb.append(" AND obj.cityId = :cityId "); //java.lang.Integer
		}
		Query q;
		List<CompanyEntity> results;
		try {
			logger.debug("JpaCompanyDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getCompanyType() != null ) {
			q.setParameter("companyType", data.getCompanyType());
		}
		if ( data.getCodeName() != null ) {
			q.setParameter("codeName", data.getCodeName());
		}
		if ( data.getCompanyAddress() != null ) {
			q.setParameter("companyAddress", data.getCompanyAddress());
		}
		if ( data.getEmail2() != null ) {
			q.setParameter("email2", data.getEmail2());
		}
		if ( data.getEmail1() != null ) {
			q.setParameter("email1", data.getEmail1());
		}
		if ( data.getTaxNo() != null ) {
			q.setParameter("taxNo", data.getTaxNo());
		}
		if ( data.getContactPhone1() != null ) {
			q.setParameter("contactPhone1", data.getContactPhone1());
		}
		if ( data.getContactPhone2() != null ) {
			q.setParameter("contactPhone2", data.getContactPhone2());
		}
		if ( data.getBottomBanner() != null ) {
			q.setParameter("bottomBanner", data.getBottomBanner());
		}
		if ( data.getVerifyStatus() != null ) {
			q.setParameter("verifyStatus", data.getVerifyStatus());
		}
		if ( data.getFax() != null ) {
			q.setParameter("fax", data.getFax());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getCompanyId() != null ) {
			q.setParameter("companyId", data.getCompanyId());
		}
		if ( data.getBusinessNo() != null ) {
			q.setParameter("businessNo", data.getBusinessNo());
		}
		if ( data.getCompanyKey() != null ) {
			q.setParameter("companyKey", data.getCompanyKey());
		}
		if ( data.getMailingAddress() != null ) {
			q.setParameter("mailingAddress", data.getMailingAddress());
		}
		if ( data.getPhone() != null ) {
			q.setParameter("phone", data.getPhone());
		}
		if ( data.getParentId() != null ) {
			q.setParameter("parentId", data.getParentId());
		}
		if ( data.getName() != null ) {
			q.setParameter("name", data.getName());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getTaxOffice() != null ) {
			q.setParameter("taxOffice", data.getTaxOffice());
		}
		if ( data.getTopBanner() != null ) {
			q.setParameter("topBanner", data.getTopBanner());
		}
		if ( data.getTransferType() != null ) {
			q.setParameter("transferType", data.getTransferType());
		}
		if ( data.getContact1() != null ) {
			q.setParameter("contact1", data.getContact1());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getPrintServiceType() != null ) {
			q.setParameter("printServiceType", data.getPrintServiceType());
		}
		if ( data.getContact2() != null ) {
			q.setParameter("contact2", data.getContact2());
		}
		if ( data.getCityId() != null ) {
			q.setParameter("cityId", data.getCityId());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<CompanyEntity> searchLike(CompanyEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CompanyEntity obj where 1=1 ");
		if ( data.getCompanyType() != null && !"".equals(data.getCompanyType())) {
			sb.append(" AND obj.companyType Like :companyType "); //java.lang.Integer
		}
		if ( data.getCodeName() != null && !"".equals(data.getCodeName())) {
			sb.append(" AND obj.codeName Like :codeName "); //java.lang.String
		}
		if ( data.getCompanyAddress() != null && !"".equals(data.getCompanyAddress())) {
			sb.append(" AND obj.companyAddress Like :companyAddress "); //java.lang.String
		}
		if ( data.getEmail2() != null && !"".equals(data.getEmail2())) {
			sb.append(" AND obj.email2 Like :email2 "); //java.lang.String
		}
		if ( data.getEmail1() != null && !"".equals(data.getEmail1())) {
			sb.append(" AND obj.email1 Like :email1 "); //java.lang.String
		}
		if ( data.getTaxNo() != null && !"".equals(data.getTaxNo())) {
			sb.append(" AND obj.taxNo Like :taxNo "); //java.lang.String
		}
		if ( data.getContactPhone1() != null && !"".equals(data.getContactPhone1())) {
			sb.append(" AND obj.contactPhone1 Like :contactPhone1 "); //java.lang.String
		}
		if ( data.getContactPhone2() != null && !"".equals(data.getContactPhone2())) {
			sb.append(" AND obj.contactPhone2 Like :contactPhone2 "); //java.lang.String
		}
		if ( data.getBottomBanner() != null && !"".equals(data.getBottomBanner())) {
			sb.append(" AND obj.bottomBanner Like :bottomBanner "); //java.lang.String
		}
		if ( data.getVerifyStatus() != null && !"".equals(data.getVerifyStatus())) {
			sb.append(" AND obj.verifyStatus Like :verifyStatus "); //java.lang.Integer
		}
		if ( data.getFax() != null && !"".equals(data.getFax())) {
			sb.append(" AND obj.fax Like :fax "); //java.lang.String
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId())) {
			sb.append(" AND obj.companyId Like :companyId "); //java.lang.Integer
		}
		if ( data.getBusinessNo() != null && !"".equals(data.getBusinessNo())) {
			sb.append(" AND obj.businessNo Like :businessNo "); //java.lang.String
		}
		if ( data.getCompanyKey() != null && !"".equals(data.getCompanyKey())) {
			sb.append(" AND obj.companyKey Like :companyKey "); //java.lang.String
		}
		if ( data.getMailingAddress() != null && !"".equals(data.getMailingAddress())) {
			sb.append(" AND obj.mailingAddress Like :mailingAddress "); //java.lang.String
		}
		if ( data.getPhone() != null && !"".equals(data.getPhone())) {
			sb.append(" AND obj.phone Like :phone "); //java.lang.String
		}
		if ( data.getParentId() != null && !"".equals(data.getParentId())) {
			sb.append(" AND obj.parentId Like :parentId "); //java.lang.Integer
		}
		if ( data.getName() != null && !"".equals(data.getName())) {
			sb.append(" AND obj.name Like :name "); //java.lang.String
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getTaxOffice() != null && !"".equals(data.getTaxOffice())) {
			sb.append(" AND obj.taxOffice Like :taxOffice "); //java.lang.String
		}
		if ( data.getTopBanner() != null && !"".equals(data.getTopBanner())) {
			sb.append(" AND obj.topBanner Like :topBanner "); //java.lang.String
		}
		if ( data.getTransferType() != null && !"".equals(data.getTransferType())) {
			sb.append(" AND obj.transferType Like :transferType "); //java.lang.Integer
		}
		if ( data.getContact1() != null && !"".equals(data.getContact1())) {
			sb.append(" AND obj.contact1 Like :contact1 "); //java.lang.String
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getPrintServiceType() != null && !"".equals(data.getPrintServiceType())) {
			sb.append(" AND obj.printServiceType Like :printServiceType "); //java.lang.Integer
		}
		if ( data.getContact2() != null && !"".equals(data.getContact2())) {
			sb.append(" AND obj.contact2 Like :contact2 "); //java.lang.String
		}
		if ( data.getCityId() != null && !"".equals(data.getCityId())) {
			sb.append(" AND obj.cityId Like :cityId "); //java.lang.Integer
		}
		Query q;
		List<CompanyEntity> results;
		try {
			logger.debug("JpaCompanyDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getCompanyType() != null && !"".equals(data.getCompanyType()) ) {
			q.setParameter("companyType", data.getCompanyType()+"%");
		}
		if ( data.getCodeName() != null && !"".equals(data.getCodeName()) ) {
			q.setParameter("codeName", data.getCodeName()+"%");
		}
		if ( data.getCompanyAddress() != null && !"".equals(data.getCompanyAddress()) ) {
			q.setParameter("companyAddress", data.getCompanyAddress()+"%");
		}
		if ( data.getEmail2() != null && !"".equals(data.getEmail2()) ) {
			q.setParameter("email2", data.getEmail2()+"%");
		}
		if ( data.getEmail1() != null && !"".equals(data.getEmail1()) ) {
			q.setParameter("email1", data.getEmail1()+"%");
		}
		if ( data.getTaxNo() != null && !"".equals(data.getTaxNo()) ) {
			q.setParameter("taxNo", data.getTaxNo()+"%");
		}
		if ( data.getContactPhone1() != null && !"".equals(data.getContactPhone1()) ) {
			q.setParameter("contactPhone1", data.getContactPhone1()+"%");
		}
		if ( data.getContactPhone2() != null && !"".equals(data.getContactPhone2()) ) {
			q.setParameter("contactPhone2", data.getContactPhone2()+"%");
		}
		if ( data.getBottomBanner() != null && !"".equals(data.getBottomBanner()) ) {
			q.setParameter("bottomBanner", data.getBottomBanner()+"%");
		}
		if ( data.getVerifyStatus() != null && !"".equals(data.getVerifyStatus()) ) {
			q.setParameter("verifyStatus", data.getVerifyStatus()+"%");
		}
		if ( data.getFax() != null && !"".equals(data.getFax()) ) {
			q.setParameter("fax", data.getFax()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId()) ) {
			q.setParameter("companyId", data.getCompanyId()+"%");
		}
		if ( data.getBusinessNo() != null && !"".equals(data.getBusinessNo()) ) {
			q.setParameter("businessNo", data.getBusinessNo()+"%");
		}
		if ( data.getCompanyKey() != null && !"".equals(data.getCompanyKey()) ) {
			q.setParameter("companyKey", data.getCompanyKey()+"%");
		}
		if ( data.getMailingAddress() != null && !"".equals(data.getMailingAddress()) ) {
			q.setParameter("mailingAddress", data.getMailingAddress()+"%");
		}
		if ( data.getPhone() != null && !"".equals(data.getPhone()) ) {
			q.setParameter("phone", data.getPhone()+"%");
		}
		if ( data.getParentId() != null && !"".equals(data.getParentId()) ) {
			q.setParameter("parentId", data.getParentId()+"%");
		}
		if ( data.getName() != null && !"".equals(data.getName()) ) {
			q.setParameter("name", data.getName()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getTaxOffice() != null && !"".equals(data.getTaxOffice()) ) {
			q.setParameter("taxOffice", data.getTaxOffice()+"%");
		}
		if ( data.getTopBanner() != null && !"".equals(data.getTopBanner()) ) {
			q.setParameter("topBanner", data.getTopBanner()+"%");
		}
		if ( data.getTransferType() != null && !"".equals(data.getTransferType()) ) {
			q.setParameter("transferType", data.getTransferType()+"%");
		}
		if ( data.getContact1() != null && !"".equals(data.getContact1()) ) {
			q.setParameter("contact1", data.getContact1()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getPrintServiceType() != null && !"".equals(data.getPrintServiceType()) ) {
			q.setParameter("printServiceType", data.getPrintServiceType()+"%");
		}
		if ( data.getContact2() != null && !"".equals(data.getContact2()) ) {
			q.setParameter("contact2", data.getContact2()+"%");
		}
		if ( data.getCityId() != null && !"".equals(data.getCityId()) ) {
			q.setParameter("cityId", data.getCityId()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
