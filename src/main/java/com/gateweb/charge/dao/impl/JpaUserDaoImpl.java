/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:15 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of User
 */
@Repository("user")
public class JpaUserDaoImpl extends JpaGenericDaoImpl<UserEntity,        java.lang.Integer             >  implements UserDao{

	/**
	 *
	 */
	public JpaUserDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param userId   PK 
    */
	public void delete(
												 java.lang.Integer userId 
																									) {
		logger.debug("JpaUserDaoImpl delete  begin "
			+"id="+userId
		);	
		try {
			Object data = entityManager.find(UserEntity.class
			, userId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<UserEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<UserEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from UserEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<UserEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from UserEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaUserDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<UserEntity> searchBy(UserEntity data) {
		StringBuffer sb = new StringBuffer("select obj from UserEntity obj where 1=1 ");

		if ( data.getCompanyId() != null ) {
			sb.append(" AND obj.companyId = :companyId "); //java.lang.Integer
		}
		if ( data.getAuthKey() != null ) {
			sb.append(" AND obj.authKey = :authKey "); //java.lang.String
		}
		if ( data.getDefaultTaxType() != null ) {
			sb.append(" AND obj.defaultTaxType = :defaultTaxType "); //java.lang.String
		}
		if ( data.getDefaultB2bFlag() != null ) {
			sb.append(" AND obj.defaultB2bFlag = :defaultB2bFlag "); //java.lang.String
		}
		if ( data.getPassword() != null ) {
			sb.append(" AND obj.password = :password "); //java.lang.String
		}
		if ( data.getUserId() != null ) {
			sb.append(" AND obj.userId = :userId "); //java.lang.Integer
		}
		if ( data.getRoleId() != null ) {
			sb.append(" AND obj.roleId = :roleId "); //java.lang.Integer
		}
		if ( data.getName() != null ) {
			sb.append(" AND obj.name = :name "); //java.lang.String
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getLogoutTime() != null ) {
			sb.append(" AND obj.logoutTime = :logoutTime "); //java.lang.Integer
		}
		if ( data.getPrinterId() != null ) {
			sb.append(" AND obj.printerId = :printerId "); //java.lang.Integer
		}
		if ( data.getAuthUrl() != null ) {
			sb.append(" AND obj.authUrl = :authUrl "); //java.lang.String
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getClose() != null ) {
			sb.append(" AND obj.close is :close "); //java.lang.Boolean
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getAccount() != null ) {
			sb.append(" AND obj.account = :account "); //java.lang.String
		}
		if ( data.getEmail() != null ) {
			sb.append(" AND obj.email = :email "); //java.lang.String
		}
		Query q;
		List<UserEntity> results;
		try {
			logger.debug("JpaUserDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getCompanyId() != null ) {
			q.setParameter("companyId", data.getCompanyId());
		}
		if ( data.getAuthKey() != null ) {
			q.setParameter("authKey", data.getAuthKey());
		}
		if ( data.getDefaultTaxType() != null ) {
			q.setParameter("defaultTaxType", data.getDefaultTaxType());
		}
		if ( data.getDefaultB2bFlag() != null ) {
			q.setParameter("defaultB2bFlag", data.getDefaultB2bFlag());
		}
		if ( data.getPassword() != null ) {
			q.setParameter("password", data.getPassword());
		}
		if ( data.getUserId() != null ) {
			q.setParameter("userId", data.getUserId());
		}
		if ( data.getRoleId() != null ) {
			q.setParameter("roleId", data.getRoleId());
		}
		if ( data.getName() != null ) {
			q.setParameter("name", data.getName());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getLogoutTime() != null ) {
			q.setParameter("logoutTime", data.getLogoutTime());
		}
		if ( data.getPrinterId() != null ) {
			q.setParameter("printerId", data.getPrinterId());
		}
		if ( data.getAuthUrl() != null ) {
			q.setParameter("authUrl", data.getAuthUrl());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getClose() != null ) {
			q.setParameter("close", data.getClose());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getAccount() != null ) {
			q.setParameter("account", data.getAccount());
		}
		if ( data.getEmail() != null ) {
			q.setParameter("email", data.getEmail());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<UserEntity> searchLike(UserEntity data) {
		StringBuffer sb = new StringBuffer("select obj from UserEntity obj where 1=1 ");
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId())) {
			sb.append(" AND obj.companyId Like :companyId "); //java.lang.Integer
		}
		if ( data.getAuthKey() != null && !"".equals(data.getAuthKey())) {
			sb.append(" AND obj.authKey Like :authKey "); //java.lang.String
		}
		if ( data.getDefaultTaxType() != null && !"".equals(data.getDefaultTaxType())) {
			sb.append(" AND obj.defaultTaxType Like :defaultTaxType "); //java.lang.String
		}
		if ( data.getDefaultB2bFlag() != null && !"".equals(data.getDefaultB2bFlag())) {
			sb.append(" AND obj.defaultB2bFlag Like :defaultB2bFlag "); //java.lang.String
		}
		if ( data.getPassword() != null && !"".equals(data.getPassword())) {
			sb.append(" AND obj.password Like :password "); //java.lang.String
		}
		if ( data.getUserId() != null && !"".equals(data.getUserId())) {
			sb.append(" AND obj.userId Like :userId "); //java.lang.Integer
		}
		if ( data.getRoleId() != null && !"".equals(data.getRoleId())) {
			sb.append(" AND obj.roleId Like :roleId "); //java.lang.Integer
		}
		if ( data.getName() != null && !"".equals(data.getName())) {
			sb.append(" AND obj.name Like :name "); //java.lang.String
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getLogoutTime() != null && !"".equals(data.getLogoutTime())) {
			sb.append(" AND obj.logoutTime Like :logoutTime "); //java.lang.Integer
		}
		if ( data.getPrinterId() != null && !"".equals(data.getPrinterId())) {
			sb.append(" AND obj.printerId Like :printerId "); //java.lang.Integer
		}
		if ( data.getAuthUrl() != null && !"".equals(data.getAuthUrl())) {
			sb.append(" AND obj.authUrl Like :authUrl "); //java.lang.String
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getClose() != null ) {
			sb.append(" AND obj.close is :close "); //java.lang.Boolean
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getAccount() != null && !"".equals(data.getAccount())) {
			sb.append(" AND obj.account Like :account "); //java.lang.String
		}
		if ( data.getEmail() != null && !"".equals(data.getEmail())) {
			sb.append(" AND obj.email Like :email "); //java.lang.String
		}
		Query q;
		List<UserEntity> results;
		try {
			logger.debug("JpaUserDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId()) ) {
			q.setParameter("companyId", data.getCompanyId()+"%");
		}
		if ( data.getAuthKey() != null && !"".equals(data.getAuthKey()) ) {
			q.setParameter("authKey", data.getAuthKey()+"%");
		}
		if ( data.getDefaultTaxType() != null && !"".equals(data.getDefaultTaxType()) ) {
			q.setParameter("defaultTaxType", data.getDefaultTaxType()+"%");
		}
		if ( data.getDefaultB2bFlag() != null && !"".equals(data.getDefaultB2bFlag()) ) {
			q.setParameter("defaultB2bFlag", data.getDefaultB2bFlag()+"%");
		}
		if ( data.getPassword() != null && !"".equals(data.getPassword()) ) {
			q.setParameter("password", data.getPassword()+"%");
		}
		if ( data.getUserId() != null && !"".equals(data.getUserId()) ) {
			q.setParameter("userId", data.getUserId()+"%");
		}
		if ( data.getRoleId() != null && !"".equals(data.getRoleId()) ) {
			q.setParameter("roleId", data.getRoleId()+"%");
		}
		if ( data.getName() != null && !"".equals(data.getName()) ) {
			q.setParameter("name", data.getName()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getLogoutTime() != null && !"".equals(data.getLogoutTime()) ) {
			q.setParameter("logoutTime", data.getLogoutTime()+"%");
		}
		if ( data.getPrinterId() != null && !"".equals(data.getPrinterId()) ) {
			q.setParameter("printerId", data.getPrinterId()+"%");
		}
		if ( data.getAuthUrl() != null && !"".equals(data.getAuthUrl()) ) {
			q.setParameter("authUrl", data.getAuthUrl()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getClose() != null ) {
			q.setParameter("close", data.getClose());
		}  	
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getAccount() != null && !"".equals(data.getAccount()) ) {
			q.setParameter("account", data.getAccount()+"%");
		}
		if ( data.getEmail() != null && !"".equals(data.getEmail()) ) {
			q.setParameter("email", data.getEmail()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
