/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CashMaster
 */
@Repository("cashMaster")
public class JpaCashMasterDaoImpl extends JpaGenericDaoImpl<CashMasterEntity,              java.lang.Integer           >  implements CashMasterDao{

	/**
	 *
	 */
	public JpaCashMasterDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param cashMasterId   PK 
    */
	public void delete(
																								 java.lang.Integer cashMasterId 
																					) {
		logger.debug("JpaCashMasterDaoImpl delete  begin "
			+"id="+cashMasterId
		);	
		try {
			Object data = entityManager.find(CashMasterEntity.class
			, cashMasterId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<CashMasterEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from CashMasterEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from CashMasterEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaCashMasterDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchBy(CashMasterEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CashMasterEntity obj where 1=1 ");

		if ( data.getTaxAmount() != null ) {
			sb.append(" AND obj.taxAmount = :taxAmount "); //java.math.BigDecimal
		}
		if ( data.getNoTaxInclusiveAmount() != null ) {
			sb.append(" AND obj.noTaxInclusiveAmount = :noTaxInclusiveAmount "); //java.math.BigDecimal
		}
		if ( data.getCompanyId() != null ) {
			sb.append(" AND obj.companyId = :companyId "); //java.lang.Integer
		}
		if ( data.getInDate() != null ) {
			sb.append(" AND obj.inDate = :inDate "); //java.sql.Timestamp
		}
		if ( data.getOutDate() != null ) {
			sb.append(" AND obj.outDate = :outDate "); //java.sql.Timestamp
		}
		if ( data.getIsFirst() != null ) {
			sb.append(" AND obj.isFirst = :isFirst "); //java.lang.String
		}
		if ( data.getIsInoutMoneyUnmatch() != null ) {
			sb.append(" AND obj.isInoutMoneyUnmatch = :isInoutMoneyUnmatch "); //java.lang.String
		}
		if ( data.getTaxRate() != null ) {
			sb.append(" AND obj.taxRate = :taxRate "); //java.lang.Float
		}
		if ( data.getEmailSentDate() != null ) {
			sb.append(" AND obj.emailSentDate = :emailSentDate "); //java.sql.Timestamp
		}
		if ( data.getInAmount() != null ) {
			sb.append(" AND obj.inAmount = :inAmount "); //java.math.BigDecimal
		}
		if ( data.getTaxInclusiveAmount() != null ) {
			sb.append(" AND obj.taxInclusiveAmount = :taxInclusiveAmount "); //java.math.BigDecimal
		}
		if ( data.getCashMasterId() != null ) {
			sb.append(" AND obj.cashMasterId = :cashMasterId "); //java.lang.Integer
		}
		if ( data.getOutYm() != null ) {
			sb.append(" AND obj.outYm = :outYm "); //java.lang.String
		}
		if ( data.getTaxType() != null ) {
			sb.append(" AND obj.taxType = :taxType "); //java.lang.String
		}
		if ( data.getExcelOutDate() != null ) {
			sb.append(" AND obj.excelOutDate = :excelOutDate "); //java.sql.Timestamp
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getInNote() != null ) {
			sb.append(" AND obj.inNote = :inNote "); //java.lang.String
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getBankYm() != null ) {
			sb.append(" AND obj.bankYm = :bankYm "); //java.lang.String
		}
		if ( data.getStatus() != null ) {
			sb.append(" AND obj.status = :status "); //java.lang.Integer
		}
		Query q;
		List<CashMasterEntity> results;
		try {
			logger.debug("JpaCashMasterDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getTaxAmount() != null ) {
			q.setParameter("taxAmount", data.getTaxAmount());
		}
		if ( data.getNoTaxInclusiveAmount() != null ) {
			q.setParameter("noTaxInclusiveAmount", data.getNoTaxInclusiveAmount());
		}
		if ( data.getCompanyId() != null ) {
			q.setParameter("companyId", data.getCompanyId());
		}
		if ( data.getInDate() != null ) {
			q.setParameter("inDate", data.getInDate());
		}
		if ( data.getOutDate() != null ) {
			q.setParameter("outDate", data.getOutDate());
		}
		if ( data.getIsFirst() != null ) {
			q.setParameter("isFirst", data.getIsFirst());
		}
		if ( data.getIsInoutMoneyUnmatch() != null ) {
			q.setParameter("isInoutMoneyUnmatch", data.getIsInoutMoneyUnmatch());
		}
		if ( data.getTaxRate() != null ) {
			q.setParameter("taxRate", data.getTaxRate());
		}
		if ( data.getEmailSentDate() != null ) {
			q.setParameter("emailSentDate", data.getEmailSentDate());
		}
		if ( data.getInAmount() != null ) {
			q.setParameter("inAmount", data.getInAmount());
		}
		if ( data.getTaxInclusiveAmount() != null ) {
			q.setParameter("taxInclusiveAmount", data.getTaxInclusiveAmount());
		}
		if ( data.getCashMasterId() != null ) {
			q.setParameter("cashMasterId", data.getCashMasterId());
		}
		if ( data.getOutYm() != null ) {
			q.setParameter("outYm", data.getOutYm());
		}
		if ( data.getTaxType() != null ) {
			q.setParameter("taxType", data.getTaxType());
		}
		if ( data.getExcelOutDate() != null ) {
			q.setParameter("excelOutDate", data.getExcelOutDate());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getInNote() != null ) {
			q.setParameter("inNote", data.getInNote());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getBankYm() != null ) {
			q.setParameter("bankYm", data.getBankYm());
		}
		if ( data.getStatus() != null ) {
			q.setParameter("status", data.getStatus());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchLike(CashMasterEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CashMasterEntity obj where 1=1 ");
		if ( data.getTaxAmount() != null ) {
			sb.append(" AND obj.taxAmount >= :taxAmount "); // java.math.BigDecimal
		}
		if ( data.getNoTaxInclusiveAmount() != null ) {
			sb.append(" AND obj.noTaxInclusiveAmount >= :noTaxInclusiveAmount "); // java.math.BigDecimal
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId())) {
			sb.append(" AND obj.companyId Like :companyId "); //java.lang.Integer
		}
		if ( data.getInDate() != null && !"".equals(data.getInDate())) {
			sb.append(" AND obj.inDate Like :inDate "); //java.sql.Timestamp
		}
		if ( data.getOutDate() != null && !"".equals(data.getOutDate())) {
			sb.append(" AND obj.outDate Like :outDate "); //java.sql.Timestamp
		}
		if ( data.getIsFirst() != null && !"".equals(data.getIsFirst())) {
			sb.append(" AND obj.isFirst Like :isFirst "); //java.lang.String
		}
		if ( data.getIsInoutMoneyUnmatch() != null && !"".equals(data.getIsInoutMoneyUnmatch())) {
			sb.append(" AND obj.isInoutMoneyUnmatch Like :isInoutMoneyUnmatch "); //java.lang.String
		}
		if ( data.getTaxRate() != null ) {
			sb.append(" AND obj.taxRate >= :taxRate "); // java.lang.Float
		}
		if ( data.getEmailSentDate() != null && !"".equals(data.getEmailSentDate())) {
			sb.append(" AND obj.emailSentDate Like :emailSentDate "); //java.sql.Timestamp
		}
		if ( data.getInAmount() != null ) {
			sb.append(" AND obj.inAmount >= :inAmount "); // java.math.BigDecimal
		}
		if ( data.getTaxInclusiveAmount() != null ) {
			sb.append(" AND obj.taxInclusiveAmount >= :taxInclusiveAmount "); // java.math.BigDecimal
		}
		if ( data.getCashMasterId() != null && !"".equals(data.getCashMasterId())) {
			sb.append(" AND obj.cashMasterId Like :cashMasterId "); //java.lang.Integer
		}
		if ( data.getOutYm() != null && !"".equals(data.getOutYm())) {
			sb.append(" AND obj.outYm Like :outYm "); //java.lang.String
		}
		if ( data.getTaxType() != null && !"".equals(data.getTaxType())) {
			sb.append(" AND obj.taxType Like :taxType "); //java.lang.String
		}
		if ( data.getExcelOutDate() != null && !"".equals(data.getExcelOutDate())) {
			sb.append(" AND obj.excelOutDate Like :excelOutDate "); //java.sql.Timestamp
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getInNote() != null && !"".equals(data.getInNote())) {
			sb.append(" AND obj.inNote Like :inNote "); //java.lang.String
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getBankYm() != null && !"".equals(data.getBankYm())) {
			sb.append(" AND obj.bankYm Like :bankYm "); //java.lang.String
		}
		if ( data.getStatus() != null && !"".equals(data.getStatus())) {
			sb.append(" AND obj.status Like :status "); //java.lang.Integer
		}
		Query q;
		List<CashMasterEntity> results;
		try {
			logger.debug("JpaCashMasterDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getTaxAmount() != null ) {
			q.setParameter("taxAmount", data.getTaxAmount());
		}  	
		if ( data.getNoTaxInclusiveAmount() != null ) {
			q.setParameter("noTaxInclusiveAmount", data.getNoTaxInclusiveAmount());
		}  	
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId()) ) {
			q.setParameter("companyId", data.getCompanyId()+"%");
		}
		if ( data.getInDate() != null && !"".equals(data.getInDate()) ) {
			q.setParameter("inDate", data.getInDate()+"%");
		}
		if ( data.getOutDate() != null && !"".equals(data.getOutDate()) ) {
			q.setParameter("outDate", data.getOutDate()+"%");
		}
		if ( data.getIsFirst() != null && !"".equals(data.getIsFirst()) ) {
			q.setParameter("isFirst", data.getIsFirst()+"%");
		}
		if ( data.getIsInoutMoneyUnmatch() != null && !"".equals(data.getIsInoutMoneyUnmatch()) ) {
			q.setParameter("isInoutMoneyUnmatch", data.getIsInoutMoneyUnmatch()+"%");
		}
		if ( data.getTaxRate() != null && !"".equals(data.getTaxRate()) ) {
			q.setParameter("taxRate", data.getTaxRate()+"%");
		}
		if ( data.getEmailSentDate() != null && !"".equals(data.getEmailSentDate()) ) {
			q.setParameter("emailSentDate", data.getEmailSentDate()+"%");
		}
		if ( data.getInAmount() != null ) {
			q.setParameter("inAmount", data.getInAmount());
		}  	
		if ( data.getTaxInclusiveAmount() != null ) {
			q.setParameter("taxInclusiveAmount", data.getTaxInclusiveAmount());
		}  	
		if ( data.getCashMasterId() != null && !"".equals(data.getCashMasterId()) ) {
			q.setParameter("cashMasterId", data.getCashMasterId()+"%");
		}
		if ( data.getOutYm() != null && !"".equals(data.getOutYm()) ) {
			q.setParameter("outYm", data.getOutYm()+"%");
		}
		if ( data.getTaxType() != null && !"".equals(data.getTaxType()) ) {
			q.setParameter("taxType", data.getTaxType()+"%");
		}
		if ( data.getExcelOutDate() != null && !"".equals(data.getExcelOutDate()) ) {
			q.setParameter("excelOutDate", data.getExcelOutDate()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getInNote() != null && !"".equals(data.getInNote()) ) {
			q.setParameter("inNote", data.getInNote()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getBankYm() != null && !"".equals(data.getBankYm()) ) {
			q.setParameter("bankYm", data.getBankYm()+"%");
		}
		if ( data.getStatus() != null && !"".equals(data.getStatus()) ) {
			q.setParameter("status", data.getStatus()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
