/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of ChargeModeGrade
 */
@Repository("chargeModeGrade")
public class JpaChargeModeGradeDaoImpl extends JpaGenericDaoImpl<ChargeModeGradeEntity,         java.lang.Integer           >  implements ChargeModeGradeDao{

	/**
	 *
	 */
	public JpaChargeModeGradeDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param chargeId   PK 
    */
	public void delete(
														 java.lang.Integer chargeId 
																					) {
		logger.debug("JpaChargeModeGradeDaoImpl delete  begin "
			+"id="+chargeId
		);	
		try {
			Object data = entityManager.find(ChargeModeGradeEntity.class
			, chargeId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<ChargeModeGradeEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<ChargeModeGradeEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from ChargeModeGradeEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<ChargeModeGradeEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from ChargeModeGradeEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaChargeModeGradeDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<ChargeModeGradeEntity> searchBy(ChargeModeGradeEntity data) {
		StringBuffer sb = new StringBuffer("select obj from ChargeModeGradeEntity obj where 1=1 ");

		if ( data.getBaseQuantity() != null ) {
			sb.append(" AND obj.baseQuantity = :baseQuantity "); //java.lang.Integer
		}
		if ( data.getChargeCycle() != null ) {
			sb.append(" AND obj.chargeCycle = :chargeCycle "); //java.lang.Integer
		}
		if ( data.getPrePayment() != null ) {
			sb.append(" AND obj.prePayment = :prePayment "); //java.lang.Integer
		}
		if ( data.getGradeCnt() != null ) {
			sb.append(" AND obj.gradeCnt = :gradeCnt "); //java.lang.Integer
		}
		if ( data.getGradePrice() != null ) {
			sb.append(" AND obj.gradePrice = :gradePrice "); //java.lang.Integer
		}
		if ( data.getFreeMonth() != null ) {
			sb.append(" AND obj.freeMonth = :freeMonth "); //java.lang.Integer
		}
		if ( data.getChargeId() != null ) {
			sb.append(" AND obj.chargeId = :chargeId "); //java.lang.Integer
		}
		if ( data.getFeePeriod() != null ) {
			sb.append(" AND obj.feePeriod = :feePeriod "); //java.lang.Integer
		}
		if ( data.getPackageName() != null ) {
			sb.append(" AND obj.packageName = :packageName "); //java.lang.String
		}
		if ( data.getSalesPrice() != null ) {
			sb.append(" AND obj.salesPrice = :salesPrice "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getContractLimit() != null ) {
			sb.append(" AND obj.contractLimit = :contractLimit "); //java.lang.Integer
		}
		if ( data.getHasGrade() != null ) {
			sb.append(" AND obj.hasGrade = :hasGrade "); //java.lang.String
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getStatus() != null ) {
			sb.append(" AND obj.status = :status "); //java.lang.Integer
		}
		Query q;
		List<ChargeModeGradeEntity> results;
		try {
			logger.debug("JpaChargeModeGradeDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getBaseQuantity() != null ) {
			q.setParameter("baseQuantity", data.getBaseQuantity());
		}
		if ( data.getChargeCycle() != null ) {
			q.setParameter("chargeCycle", data.getChargeCycle());
		}
		if ( data.getPrePayment() != null ) {
			q.setParameter("prePayment", data.getPrePayment());
		}
		if ( data.getGradeCnt() != null ) {
			q.setParameter("gradeCnt", data.getGradeCnt());
		}
		if ( data.getGradePrice() != null ) {
			q.setParameter("gradePrice", data.getGradePrice());
		}
		if ( data.getFreeMonth() != null ) {
			q.setParameter("freeMonth", data.getFreeMonth());
		}
		if ( data.getChargeId() != null ) {
			q.setParameter("chargeId", data.getChargeId());
		}
		if ( data.getFeePeriod() != null ) {
			q.setParameter("feePeriod", data.getFeePeriod());
		}
		if ( data.getPackageName() != null ) {
			q.setParameter("packageName", data.getPackageName());
		}
		if ( data.getSalesPrice() != null ) {
			q.setParameter("salesPrice", data.getSalesPrice());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getContractLimit() != null ) {
			q.setParameter("contractLimit", data.getContractLimit());
		}
		if ( data.getHasGrade() != null ) {
			q.setParameter("hasGrade", data.getHasGrade());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getStatus() != null ) {
			q.setParameter("status", data.getStatus());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<ChargeModeGradeEntity> searchLike(ChargeModeGradeEntity data) {
		StringBuffer sb = new StringBuffer("select obj from ChargeModeGradeEntity obj where 1=1 ");
		if ( data.getBaseQuantity() != null && !"".equals(data.getBaseQuantity())) {
			sb.append(" AND obj.baseQuantity Like :baseQuantity "); //java.lang.Integer
		}
		if ( data.getChargeCycle() != null && !"".equals(data.getChargeCycle())) {
			sb.append(" AND obj.chargeCycle Like :chargeCycle "); //java.lang.Integer
		}
		if ( data.getPrePayment() != null && !"".equals(data.getPrePayment())) {
			sb.append(" AND obj.prePayment Like :prePayment "); //java.lang.Integer
		}
		if ( data.getGradeCnt() != null && !"".equals(data.getGradeCnt())) {
			sb.append(" AND obj.gradeCnt Like :gradeCnt "); //java.lang.Integer
		}
		if ( data.getGradePrice() != null && !"".equals(data.getGradePrice())) {
			sb.append(" AND obj.gradePrice Like :gradePrice "); //java.lang.Integer
		}
		if ( data.getFreeMonth() != null && !"".equals(data.getFreeMonth())) {
			sb.append(" AND obj.freeMonth Like :freeMonth "); //java.lang.Integer
		}
		if ( data.getChargeId() != null && !"".equals(data.getChargeId())) {
			sb.append(" AND obj.chargeId Like :chargeId "); //java.lang.Integer
		}
		if ( data.getFeePeriod() != null && !"".equals(data.getFeePeriod())) {
			sb.append(" AND obj.feePeriod Like :feePeriod "); //java.lang.Integer
		}
		if ( data.getPackageName() != null && !"".equals(data.getPackageName())) {
			sb.append(" AND obj.packageName Like :packageName "); //java.lang.String
		}
		if ( data.getSalesPrice() != null && !"".equals(data.getSalesPrice())) {
			sb.append(" AND obj.salesPrice Like :salesPrice "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getContractLimit() != null && !"".equals(data.getContractLimit())) {
			sb.append(" AND obj.contractLimit Like :contractLimit "); //java.lang.Integer
		}
		if ( data.getHasGrade() != null && !"".equals(data.getHasGrade())) {
			sb.append(" AND obj.hasGrade Like :hasGrade "); //java.lang.String
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getStatus() != null && !"".equals(data.getStatus())) {
			sb.append(" AND obj.status Like :status "); //java.lang.Integer
		}
		Query q;
		List<ChargeModeGradeEntity> results;
		try {
			logger.debug("JpaChargeModeGradeDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getBaseQuantity() != null && !"".equals(data.getBaseQuantity()) ) {
			q.setParameter("baseQuantity", data.getBaseQuantity()+"%");
		}
		if ( data.getChargeCycle() != null && !"".equals(data.getChargeCycle()) ) {
			q.setParameter("chargeCycle", data.getChargeCycle()+"%");
		}
		if ( data.getPrePayment() != null && !"".equals(data.getPrePayment()) ) {
			q.setParameter("prePayment", data.getPrePayment()+"%");
		}
		if ( data.getGradeCnt() != null && !"".equals(data.getGradeCnt()) ) {
			q.setParameter("gradeCnt", data.getGradeCnt()+"%");
		}
		if ( data.getGradePrice() != null && !"".equals(data.getGradePrice()) ) {
			q.setParameter("gradePrice", data.getGradePrice()+"%");
		}
		if ( data.getFreeMonth() != null && !"".equals(data.getFreeMonth()) ) {
			q.setParameter("freeMonth", data.getFreeMonth()+"%");
		}
		if ( data.getChargeId() != null && !"".equals(data.getChargeId()) ) {
			q.setParameter("chargeId", data.getChargeId()+"%");
		}
		if ( data.getFeePeriod() != null && !"".equals(data.getFeePeriod()) ) {
			q.setParameter("feePeriod", data.getFeePeriod()+"%");
		}
		if ( data.getPackageName() != null && !"".equals(data.getPackageName()) ) {
			q.setParameter("packageName", data.getPackageName()+"%");
		}
		if ( data.getSalesPrice() != null && !"".equals(data.getSalesPrice()) ) {
			q.setParameter("salesPrice", data.getSalesPrice()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getContractLimit() != null && !"".equals(data.getContractLimit()) ) {
			q.setParameter("contractLimit", data.getContractLimit()+"%");
		}
		if ( data.getHasGrade() != null && !"".equals(data.getHasGrade()) ) {
			q.setParameter("hasGrade", data.getHasGrade()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getStatus() != null && !"".equals(data.getStatus()) ) {
			q.setParameter("status", data.getStatus()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
