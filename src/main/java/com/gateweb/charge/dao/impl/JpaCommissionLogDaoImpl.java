/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CommissionLog
 */
@Repository("commissionLog")
public class JpaCommissionLogDaoImpl extends JpaGenericDaoImpl<CommissionLogEntity,         java.lang.Integer             >  implements CommissionLogDao{

	/**
	 *
	 */
	public JpaCommissionLogDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param commissionLogId   PK 
    */
	public void delete(
														 java.lang.Integer commissionLogId 
																									) {
		logger.debug("JpaCommissionLogDaoImpl delete  begin "
			+"id="+commissionLogId
		);	
		try {
			Object data = entityManager.find(CommissionLogEntity.class
			, commissionLogId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<CommissionLogEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from CommissionLogEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from CommissionLogEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaCommissionLogDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchBy(CommissionLogEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CommissionLogEntity obj where 1=1 ");

		if ( data.getNote() != null ) {
			sb.append(" AND obj.note = :note "); //java.lang.String
		}
		if ( data.getAddtionPercent() != null ) {
			sb.append(" AND obj.addtionPercent = :addtionPercent "); //java.math.BigDecimal
		}
		if ( data.getInDateEnd() != null ) {
			sb.append(" AND obj.inDateEnd = :inDateEnd "); //java.util.Date
		}
		if ( data.getCommissionAmount() != null ) {
			sb.append(" AND obj.commissionAmount = :commissionAmount "); //java.math.BigDecimal
		}
		if ( data.getCollectMoney() != null ) {
			sb.append(" AND obj.collectMoney = :collectMoney "); //java.math.BigDecimal
		}
		if ( data.getCommissionYmd() != null ) {
			sb.append(" AND obj.commissionYmd = :commissionYmd "); //java.lang.String
		}
		if ( data.getCommissionLogId() != null ) {
			sb.append(" AND obj.commissionLogId = :commissionLogId "); //java.lang.Integer
		}
		if ( data.getMainAmount() != null ) {
			sb.append(" AND obj.mainAmount = :mainAmount "); //java.math.BigDecimal
		}
		if ( data.getInAmount() != null ) {
			sb.append(" AND obj.inAmount = :inAmount "); //java.math.BigDecimal
		}
		if ( data.getMainPercent() != null ) {
			sb.append(" AND obj.mainPercent = :mainPercent "); //java.math.BigDecimal
		}
		if ( data.getUserCpId() != null ) {
			sb.append(" AND obj.userCpId = :userCpId "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getCommissionCpId() != null ) {
			sb.append(" AND obj.commissionCpId = :commissionCpId "); //java.lang.Integer
		}
		if ( data.getIsPaid() != null ) {
			sb.append(" AND obj.isPaid = :isPaid "); //java.lang.String
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getCommissionType() != null ) {
			sb.append(" AND obj.commissionType = :commissionType "); //java.lang.String
		}
		if ( data.getInDateStart() != null ) {
			sb.append(" AND obj.inDateStart = :inDateStart "); //java.util.Date
		}
		Query q;
		List<CommissionLogEntity> results;
		try {
			logger.debug("JpaCommissionLogDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getNote() != null ) {
			q.setParameter("note", data.getNote());
		}
		if ( data.getAddtionPercent() != null ) {
			q.setParameter("addtionPercent", data.getAddtionPercent());
		}
		if ( data.getInDateEnd() != null ) {
			q.setParameter("inDateEnd", data.getInDateEnd());
		}
		if ( data.getCommissionAmount() != null ) {
			q.setParameter("commissionAmount", data.getCommissionAmount());
		}
		if ( data.getCollectMoney() != null ) {
			q.setParameter("collectMoney", data.getCollectMoney());
		}
		if ( data.getCommissionYmd() != null ) {
			q.setParameter("commissionYmd", data.getCommissionYmd());
		}
		if ( data.getCommissionLogId() != null ) {
			q.setParameter("commissionLogId", data.getCommissionLogId());
		}
		if ( data.getMainAmount() != null ) {
			q.setParameter("mainAmount", data.getMainAmount());
		}
		if ( data.getInAmount() != null ) {
			q.setParameter("inAmount", data.getInAmount());
		}
		if ( data.getMainPercent() != null ) {
			q.setParameter("mainPercent", data.getMainPercent());
		}
		if ( data.getUserCpId() != null ) {
			q.setParameter("userCpId", data.getUserCpId());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getCommissionCpId() != null ) {
			q.setParameter("commissionCpId", data.getCommissionCpId());
		}
		if ( data.getIsPaid() != null ) {
			q.setParameter("isPaid", data.getIsPaid());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getCommissionType() != null ) {
			q.setParameter("commissionType", data.getCommissionType());
		}
		if ( data.getInDateStart() != null ) {
			q.setParameter("inDateStart", data.getInDateStart());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchLike(CommissionLogEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CommissionLogEntity obj where 1=1 ");
		if ( data.getNote() != null && !"".equals(data.getNote())) {
			sb.append(" AND obj.note Like :note "); //java.lang.String
		}
		if ( data.getAddtionPercent() != null ) {
			sb.append(" AND obj.addtionPercent >= :addtionPercent "); // java.math.BigDecimal
		}
		if ( data.getInDateEnd() != null && !"".equals(data.getInDateEnd())) {
			sb.append(" AND obj.inDateEnd Like :inDateEnd "); //java.util.Date
		}
		if ( data.getCommissionAmount() != null ) {
			sb.append(" AND obj.commissionAmount >= :commissionAmount "); // java.math.BigDecimal
		}
		if ( data.getCollectMoney() != null ) {
			sb.append(" AND obj.collectMoney >= :collectMoney "); // java.math.BigDecimal
		}
		if ( data.getCommissionYmd() != null && !"".equals(data.getCommissionYmd())) {
			sb.append(" AND obj.commissionYmd Like :commissionYmd "); //java.lang.String
		}
		if ( data.getCommissionLogId() != null && !"".equals(data.getCommissionLogId())) {
			sb.append(" AND obj.commissionLogId Like :commissionLogId "); //java.lang.Integer
		}
		if ( data.getMainAmount() != null ) {
			sb.append(" AND obj.mainAmount >= :mainAmount "); // java.math.BigDecimal
		}
		if ( data.getInAmount() != null ) {
			sb.append(" AND obj.inAmount >= :inAmount "); // java.math.BigDecimal
		}
		if ( data.getMainPercent() != null ) {
			sb.append(" AND obj.mainPercent >= :mainPercent "); // java.math.BigDecimal
		}
		if ( data.getUserCpId() != null && !"".equals(data.getUserCpId())) {
			sb.append(" AND obj.userCpId Like :userCpId "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getCommissionCpId() != null && !"".equals(data.getCommissionCpId())) {
			sb.append(" AND obj.commissionCpId Like :commissionCpId "); //java.lang.Integer
		}
		if ( data.getIsPaid() != null && !"".equals(data.getIsPaid())) {
			sb.append(" AND obj.isPaid Like :isPaid "); //java.lang.String
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getCommissionType() != null && !"".equals(data.getCommissionType())) {
			sb.append(" AND obj.commissionType Like :commissionType "); //java.lang.String
		}
		if ( data.getInDateStart() != null && !"".equals(data.getInDateStart())) {
			sb.append(" AND obj.inDateStart Like :inDateStart "); //java.util.Date
		}
		Query q;
		List<CommissionLogEntity> results;
		try {
			logger.debug("JpaCommissionLogDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getNote() != null && !"".equals(data.getNote()) ) {
			q.setParameter("note", data.getNote()+"%");
		}
		if ( data.getAddtionPercent() != null ) {
			q.setParameter("addtionPercent", data.getAddtionPercent());
		}  	
		if ( data.getInDateEnd() != null && !"".equals(data.getInDateEnd()) ) {
			q.setParameter("inDateEnd", data.getInDateEnd()+"%");
		}
		if ( data.getCommissionAmount() != null ) {
			q.setParameter("commissionAmount", data.getCommissionAmount());
		}  	
		if ( data.getCollectMoney() != null ) {
			q.setParameter("collectMoney", data.getCollectMoney());
		}  	
		if ( data.getCommissionYmd() != null && !"".equals(data.getCommissionYmd()) ) {
			q.setParameter("commissionYmd", data.getCommissionYmd()+"%");
		}
		if ( data.getCommissionLogId() != null && !"".equals(data.getCommissionLogId()) ) {
			q.setParameter("commissionLogId", data.getCommissionLogId()+"%");
		}
		if ( data.getMainAmount() != null ) {
			q.setParameter("mainAmount", data.getMainAmount());
		}  	
		if ( data.getInAmount() != null ) {
			q.setParameter("inAmount", data.getInAmount());
		}  	
		if ( data.getMainPercent() != null ) {
			q.setParameter("mainPercent", data.getMainPercent());
		}  	
		if ( data.getUserCpId() != null && !"".equals(data.getUserCpId()) ) {
			q.setParameter("userCpId", data.getUserCpId()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getCommissionCpId() != null && !"".equals(data.getCommissionCpId()) ) {
			q.setParameter("commissionCpId", data.getCommissionCpId()+"%");
		}
		if ( data.getIsPaid() != null && !"".equals(data.getIsPaid()) ) {
			q.setParameter("isPaid", data.getIsPaid()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getCommissionType() != null && !"".equals(data.getCommissionType()) ) {
			q.setParameter("commissionType", data.getCommissionType()+"%");
		}
		if ( data.getInDateStart() != null && !"".equals(data.getInDateStart()) ) {
			q.setParameter("inDateStart", data.getInDateStart()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
