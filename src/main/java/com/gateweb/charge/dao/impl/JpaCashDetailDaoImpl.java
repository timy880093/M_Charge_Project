/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Collection;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CashDetail
 */
@Repository("cashDetail")
public class JpaCashDetailDaoImpl extends JpaGenericDaoImpl<CashDetailEntity,                       java.lang.Integer     >  implements CashDetailDao{

	/**
	 *
	 */
	public JpaCashDetailDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Log logger = LogFactory.getLog(getClass());

    /**
     * Delete a record in Database.
	 * @param cashDetailId   PK 
    */
	public void delete(
																																										 java.lang.Integer cashDetailId 
									) {
		log.debug("JpaCashDetailDaoImpl delete  begin "
			+"id="+cashDetailId
		);	
		try {
			Object data = entityManager.find(CashDetailEntity.class
			, cashDetailId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<CashDetailEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from CashDetailEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from CashDetailEntity model where model."
					+ propertyName + "= :propertyValue";
		log.debug("JpaCashDetailDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchBy(CashDetailEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CashDetailEntity obj where 1=1 ");

		if ( data.getNoTaxInclusivePrice() != null ) {
			sb.append(" AND obj.noTaxInclusivePrice = :noTaxInclusivePrice "); //java.math.BigDecimal
		}
		if ( data.getTaxPrice() != null ) {
			sb.append(" AND obj.taxPrice = :taxPrice "); //java.math.BigDecimal
		}
		if ( data.getPackageId() != null ) {
			sb.append(" AND obj.packageId = :packageId "); //java.lang.Integer
		}
		if ( data.getTaxRate() != null ) {
			sb.append(" AND obj.taxRate = :taxRate "); //java.lang.Float
		}
		if ( data.getCashType() != null ) {
			sb.append(" AND obj.cashType = :cashType "); //java.lang.Integer
		}
		if ( data.getBillType() != null ) {
			sb.append(" AND obj.billType = :billType "); //java.lang.Integer
		}
		if ( data.getCalYm() != null ) {
			sb.append(" AND obj.calYm = :calYm "); //java.lang.String
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getBillId() != null ) {
			sb.append(" AND obj.billId = :billId "); //java.lang.Integer
		}
		if ( data.getCompanyId() != null ) {
			sb.append(" AND obj.companyId = :companyId "); //java.lang.Integer
		}
		if ( data.getCommissionAmount() != null ) {
			sb.append(" AND obj.commissionAmount = :commissionAmount "); //java.math.BigDecimal
		}
		if ( data.getIsFirst() != null ) {
			sb.append(" AND obj.isFirst = :isFirst "); //java.lang.String
		}
		if ( data.getDiffPriceNote() != null ) {
			sb.append(" AND obj.diffPriceNote = :diffPriceNote "); //java.lang.String
		}
		if ( data.getCommissionLogId() != null ) {
			sb.append(" AND obj.commissionLogId = :commissionLogId "); //java.lang.Integer
		}
		if ( data.getTaxInclusivePrice() != null ) {
			sb.append(" AND obj.taxInclusivePrice = :taxInclusivePrice "); //java.math.BigDecimal
		}
		if ( data.getCashMasterId() != null ) {
			sb.append(" AND obj.cashMasterId = :cashMasterId "); //java.lang.Integer
		}
		if ( data.getTaxType() != null ) {
			sb.append(" AND obj.taxType = :taxType "); //java.lang.String
		}
		if ( data.getOutYm() != null ) {
			sb.append(" AND obj.outYm = :outYm "); //java.lang.String
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getCashDetailId() != null ) {
			sb.append(" AND obj.cashDetailId = :cashDetailId "); //java.lang.Integer
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getOrgPrice() != null ) {
			sb.append(" AND obj.orgPrice = :orgPrice "); //java.math.BigDecimal
		}
		if ( data.getDiffPrice() != null ) {
			sb.append(" AND obj.diffPrice = :diffPrice "); //java.math.BigDecimal
		}
		if ( data.getStatus() != null ) {
			sb.append(" AND obj.status = :status "); //java.lang.Integer
		}
		Query q;
		List<CashDetailEntity> results;
		try {
			log.debug("JpaCashDetailDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getNoTaxInclusivePrice() != null ) {
			q.setParameter("noTaxInclusivePrice", data.getNoTaxInclusivePrice());
		}
		if ( data.getTaxPrice() != null ) {
			q.setParameter("taxPrice", data.getTaxPrice());
		}
		if ( data.getPackageId() != null ) {
			q.setParameter("packageId", data.getPackageId());
		}
		if ( data.getTaxRate() != null ) {
			q.setParameter("taxRate", data.getTaxRate());
		}
		if ( data.getCashType() != null ) {
			q.setParameter("cashType", data.getCashType());
		}
		if ( data.getBillType() != null ) {
			q.setParameter("billType", data.getBillType());
		}
		if ( data.getCalYm() != null ) {
			q.setParameter("calYm", data.getCalYm());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getBillId() != null ) {
			q.setParameter("billId", data.getBillId());
		}
		if ( data.getCompanyId() != null ) {
			q.setParameter("companyId", data.getCompanyId());
		}
		if ( data.getCommissionAmount() != null ) {
			q.setParameter("commissionAmount", data.getCommissionAmount());
		}
		if ( data.getIsFirst() != null ) {
			q.setParameter("isFirst", data.getIsFirst());
		}
		if ( data.getDiffPriceNote() != null ) {
			q.setParameter("diffPriceNote", data.getDiffPriceNote());
		}
		if ( data.getCommissionLogId() != null ) {
			q.setParameter("commissionLogId", data.getCommissionLogId());
		}
		if ( data.getTaxInclusivePrice() != null ) {
			q.setParameter("taxInclusivePrice", data.getTaxInclusivePrice());
		}
		if ( data.getCashMasterId() != null ) {
			q.setParameter("cashMasterId", data.getCashMasterId());
		}
		if ( data.getTaxType() != null ) {
			q.setParameter("taxType", data.getTaxType());
		}
		if ( data.getOutYm() != null ) {
			q.setParameter("outYm", data.getOutYm());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getCashDetailId() != null ) {
			q.setParameter("cashDetailId", data.getCashDetailId());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getOrgPrice() != null ) {
			q.setParameter("orgPrice", data.getOrgPrice());
		}
		if ( data.getDiffPrice() != null ) {
			q.setParameter("diffPrice", data.getDiffPrice());
		}
		if ( data.getStatus() != null ) {
			q.setParameter("status", data.getStatus());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchLike(CashDetailEntity data) {
		StringBuffer sb = new StringBuffer("select obj from CashDetailEntity obj where 1=1 ");
		if ( data.getNoTaxInclusivePrice() != null ) {
			sb.append(" AND obj.noTaxInclusivePrice >= :noTaxInclusivePrice "); // java.math.BigDecimal
		}
		if ( data.getTaxPrice() != null ) {
			sb.append(" AND obj.taxPrice >= :taxPrice "); // java.math.BigDecimal
		}
		if ( data.getPackageId() != null && !"".equals(data.getPackageId())) {
			sb.append(" AND obj.packageId Like :packageId "); //java.lang.Integer
		}
		if ( data.getTaxRate() != null ) {
			sb.append(" AND obj.taxRate >= :taxRate "); // java.lang.Float
		}
		if ( data.getCashType() != null && !"".equals(data.getCashType())) {
			sb.append(" AND obj.cashType Like :cashType "); //java.lang.Integer
		}
		if ( data.getBillType() != null && !"".equals(data.getBillType())) {
			sb.append(" AND obj.billType Like :billType "); //java.lang.Integer
		}
		if ( data.getCalYm() != null && !"".equals(data.getCalYm())) {
			sb.append(" AND obj.calYm Like :calYm "); //java.lang.String
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getBillId() != null && !"".equals(data.getBillId())) {
			sb.append(" AND obj.billId Like :billId "); //java.lang.Integer
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId())) {
			sb.append(" AND obj.companyId Like :companyId "); //java.lang.Integer
		}
		if ( data.getCommissionAmount() != null ) {
			sb.append(" AND obj.commissionAmount >= :commissionAmount "); // java.math.BigDecimal
		}
		if ( data.getIsFirst() != null && !"".equals(data.getIsFirst())) {
			sb.append(" AND obj.isFirst Like :isFirst "); //java.lang.String
		}
		if ( data.getDiffPriceNote() != null && !"".equals(data.getDiffPriceNote())) {
			sb.append(" AND obj.diffPriceNote Like :diffPriceNote "); //java.lang.String
		}
		if ( data.getCommissionLogId() != null && !"".equals(data.getCommissionLogId())) {
			sb.append(" AND obj.commissionLogId Like :commissionLogId "); //java.lang.Integer
		}
		if ( data.getTaxInclusivePrice() != null ) {
			sb.append(" AND obj.taxInclusivePrice >= :taxInclusivePrice "); // java.math.BigDecimal
		}
		if ( data.getCashMasterId() != null && !"".equals(data.getCashMasterId())) {
			sb.append(" AND obj.cashMasterId Like :cashMasterId "); //java.lang.Integer
		}
		if ( data.getTaxType() != null && !"".equals(data.getTaxType())) {
			sb.append(" AND obj.taxType Like :taxType "); //java.lang.String
		}
		if ( data.getOutYm() != null && !"".equals(data.getOutYm())) {
			sb.append(" AND obj.outYm Like :outYm "); //java.lang.String
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getCashDetailId() != null && !"".equals(data.getCashDetailId())) {
			sb.append(" AND obj.cashDetailId Like :cashDetailId "); //java.lang.Integer
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getOrgPrice() != null ) {
			sb.append(" AND obj.orgPrice >= :orgPrice "); // java.math.BigDecimal
		}
		if ( data.getDiffPrice() != null ) {
			sb.append(" AND obj.diffPrice >= :diffPrice "); // java.math.BigDecimal
		}
		if ( data.getStatus() != null && !"".equals(data.getStatus())) {
			sb.append(" AND obj.status Like :status "); //java.lang.Integer
		}
		Query q;
		List<CashDetailEntity> results;
		try {
			log.debug("JpaCashDetailDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getNoTaxInclusivePrice() != null ) {
			q.setParameter("noTaxInclusivePrice", data.getNoTaxInclusivePrice());
		}  	
		if ( data.getTaxPrice() != null ) {
			q.setParameter("taxPrice", data.getTaxPrice());
		}  	
		if ( data.getPackageId() != null && !"".equals(data.getPackageId()) ) {
			q.setParameter("packageId", data.getPackageId()+"%");
		}
		if ( data.getTaxRate() != null && !"".equals(data.getTaxRate()) ) {
			q.setParameter("taxRate", data.getTaxRate()+"%");
		}
		if ( data.getCashType() != null && !"".equals(data.getCashType()) ) {
			q.setParameter("cashType", data.getCashType()+"%");
		}
		if ( data.getBillType() != null && !"".equals(data.getBillType()) ) {
			q.setParameter("billType", data.getBillType()+"%");
		}
		if ( data.getCalYm() != null && !"".equals(data.getCalYm()) ) {
			q.setParameter("calYm", data.getCalYm()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getBillId() != null && !"".equals(data.getBillId()) ) {
			q.setParameter("billId", data.getBillId()+"%");
		}
		if ( data.getCompanyId() != null && !"".equals(data.getCompanyId()) ) {
			q.setParameter("companyId", data.getCompanyId()+"%");
		}
		if ( data.getCommissionAmount() != null ) {
			q.setParameter("commissionAmount", data.getCommissionAmount());
		}  	
		if ( data.getIsFirst() != null && !"".equals(data.getIsFirst()) ) {
			q.setParameter("isFirst", data.getIsFirst()+"%");
		}
		if ( data.getDiffPriceNote() != null && !"".equals(data.getDiffPriceNote()) ) {
			q.setParameter("diffPriceNote", data.getDiffPriceNote()+"%");
		}
		if ( data.getCommissionLogId() != null && !"".equals(data.getCommissionLogId()) ) {
			q.setParameter("commissionLogId", data.getCommissionLogId()+"%");
		}
		if ( data.getTaxInclusivePrice() != null ) {
			q.setParameter("taxInclusivePrice", data.getTaxInclusivePrice());
		}  	
		if ( data.getCashMasterId() != null && !"".equals(data.getCashMasterId()) ) {
			q.setParameter("cashMasterId", data.getCashMasterId()+"%");
		}
		if ( data.getTaxType() != null && !"".equals(data.getTaxType()) ) {
			q.setParameter("taxType", data.getTaxType()+"%");
		}
		if ( data.getOutYm() != null && !"".equals(data.getOutYm()) ) {
			q.setParameter("outYm", data.getOutYm()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getCashDetailId() != null && !"".equals(data.getCashDetailId()) ) {
			q.setParameter("cashDetailId", data.getCashDetailId()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getOrgPrice() != null ) {
			q.setParameter("orgPrice", data.getOrgPrice());
		}  	
		if ( data.getDiffPrice() != null ) {
			q.setParameter("diffPrice", data.getDiffPrice());
		}  	
		if ( data.getStatus() != null && !"".equals(data.getStatus()) ) {
			q.setParameter("status", data.getStatus()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
