/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.dao.impl; 
import com.gateweb.charge.dao.*; 
import com.gateweb.charge.model.*;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import javax.persistence.Query;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import com.gateweb.db.dao.exception.DaoSystemException;
import com.gateweb.jpa.dao.JpaGenericDaoImpl;
import org.springframework.stereotype.Repository;
/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of ChargeModeCycleAdd
 */
@Repository("chargeModeCycleAdd")
public class JpaChargeModeCycleAddDaoImpl extends JpaGenericDaoImpl<ChargeModeCycleAddEntity,   java.lang.Integer            >  implements ChargeModeCycleAddDao{

	/**
	 *
	 */
	public JpaChargeModeCycleAddDaoImpl(){
	}

	/**
	 *
	 */ 
	protected final Logger logger = LogManager.getLogger(getClass());

    /**
     * Delete a record in Database.
	 * @param additionId   PK 
    */
	public void delete(
		 java.lang.Integer additionId 
																							) {
		logger.debug("JpaChargeModeCycleAddDaoImpl delete  begin "
			+"id="+additionId
		);	
		try {
			Object data = entityManager.find(ChargeModeCycleAddEntity.class
			, additionId
			);
			entityManager.remove(data);
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		} catch (TransactionRequiredException tre){
			//	PersistenceException	
			tre.printStackTrace();
			throw new DaoSystemException("JPA10004-"+tre.getMessage(),tre);	
		} 
    }  
   
	@SuppressWarnings("unchecked")
	public List<ChargeModeCycleAddEntity> getSome(int pageNo, int noRowsPerPage)
		{
		List<ChargeModeCycleAddEntity> results = new ArrayList();
		Query q;
		try {
			q = entityManager.createQuery("select obj from ChargeModeCycleAddEntity obj ");
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		try {
			if (pageNo > 0 && noRowsPerPage > 0) {
				q.setFirstResult(noRowsPerPage * (pageNo - 1) + 1).setMaxResults(
					noRowsPerPage);
				results = q.getResultList();
			}
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		return results;
	}
	
	@SuppressWarnings("unchecked")
	public List<ChargeModeCycleAddEntity> searchByProperty(String propertyName,
			final Object value, final int... rowStartIdxAndCount) {
		final String queryString = "select model from ChargeModeCycleAddEntity model where model."
					+ propertyName + "= :propertyValue";
		logger.debug("JpaChargeModeCycleAddDaoImpl findByProperty   queryString :   "+queryString);
		try {
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
				int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
				if (rowStartIdx > 0) {
					query.setFirstResult(rowStartIdx);
				}

				if (rowStartIdxAndCount.length > 1) {
					int rowCount = Math.max(0, rowStartIdxAndCount[1]);
					if (rowCount > 0) {
						query.setMaxResults(rowCount);
					}
				}
			}
			return query.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}

	}   	
	
	@SuppressWarnings("unchecked")
	public List<ChargeModeCycleAddEntity> searchBy(ChargeModeCycleAddEntity data) {
		StringBuffer sb = new StringBuffer("select obj from ChargeModeCycleAddEntity obj where 1=1 ");

		if ( data.getAdditionId() != null ) {
			sb.append(" AND obj.additionId = :additionId "); //java.lang.Integer
		}
		if ( data.getEndDate() != null ) {
			sb.append(" AND obj.endDate = :endDate "); //java.util.Date
		}
		if ( data.getRealStartDate() != null ) {
			sb.append(" AND obj.realStartDate = :realStartDate "); //java.util.Date
		}
		if ( data.getFreeMonth() != null ) {
			sb.append(" AND obj.freeMonth = :freeMonth "); //java.lang.Integer
		}
		if ( data.getAdditionQuantity() != null ) {
			sb.append(" AND obj.additionQuantity = :additionQuantity "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null ) {
			sb.append(" AND obj.creatorId = :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null ) {
			sb.append(" AND obj.modifierId = :modifierId "); //java.lang.Integer
		}
		if ( data.getRealEndDate() != null ) {
			sb.append(" AND obj.realEndDate = :realEndDate "); //java.util.Date
		}
		if ( data.getCreateDate() != null ) {
			sb.append(" AND obj.createDate = :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null ) {
			sb.append(" AND obj.modifyDate = :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getGiftPrice() != null ) {
			sb.append(" AND obj.giftPrice = :giftPrice "); //java.math.BigDecimal
		}
		if ( data.getStartDate() != null ) {
			sb.append(" AND obj.startDate = :startDate "); //java.util.Date
		}
		Query q;
		List<ChargeModeCycleAddEntity> results;
		try {
			logger.debug("JpaChargeModeCycleAddDaoImpl searchBy  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getAdditionId() != null ) {
			q.setParameter("additionId", data.getAdditionId());
		}
		if ( data.getEndDate() != null ) {
			q.setParameter("endDate", data.getEndDate());
		}
		if ( data.getRealStartDate() != null ) {
			q.setParameter("realStartDate", data.getRealStartDate());
		}
		if ( data.getFreeMonth() != null ) {
			q.setParameter("freeMonth", data.getFreeMonth());
		}
		if ( data.getAdditionQuantity() != null ) {
			q.setParameter("additionQuantity", data.getAdditionQuantity());
		}
		if ( data.getCreatorId() != null ) {
			q.setParameter("creatorId", data.getCreatorId());
		}
		if ( data.getModifierId() != null ) {
			q.setParameter("modifierId", data.getModifierId());
		}
		if ( data.getRealEndDate() != null ) {
			q.setParameter("realEndDate", data.getRealEndDate());
		}
		if ( data.getCreateDate() != null ) {
			q.setParameter("createDate", data.getCreateDate());
		}
		if ( data.getModifyDate() != null ) {
			q.setParameter("modifyDate", data.getModifyDate());
		}
		if ( data.getGiftPrice() != null ) {
			q.setParameter("giftPrice", data.getGiftPrice());
		}
		if ( data.getStartDate() != null ) {
			q.setParameter("startDate", data.getStartDate());
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} 
		return results; 
	}

	@SuppressWarnings("unchecked")
	public List<ChargeModeCycleAddEntity> searchLike(ChargeModeCycleAddEntity data) {
		StringBuffer sb = new StringBuffer("select obj from ChargeModeCycleAddEntity obj where 1=1 ");
		if ( data.getAdditionId() != null && !"".equals(data.getAdditionId())) {
			sb.append(" AND obj.additionId Like :additionId "); //java.lang.Integer
		}
		if ( data.getEndDate() != null && !"".equals(data.getEndDate())) {
			sb.append(" AND obj.endDate Like :endDate "); //java.util.Date
		}
		if ( data.getRealStartDate() != null && !"".equals(data.getRealStartDate())) {
			sb.append(" AND obj.realStartDate Like :realStartDate "); //java.util.Date
		}
		if ( data.getFreeMonth() != null && !"".equals(data.getFreeMonth())) {
			sb.append(" AND obj.freeMonth Like :freeMonth "); //java.lang.Integer
		}
		if ( data.getAdditionQuantity() != null && !"".equals(data.getAdditionQuantity())) {
			sb.append(" AND obj.additionQuantity Like :additionQuantity "); //java.lang.Integer
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId())) {
			sb.append(" AND obj.creatorId Like :creatorId "); //java.lang.Integer
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId())) {
			sb.append(" AND obj.modifierId Like :modifierId "); //java.lang.Integer
		}
		if ( data.getRealEndDate() != null && !"".equals(data.getRealEndDate())) {
			sb.append(" AND obj.realEndDate Like :realEndDate "); //java.util.Date
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate())) {
			sb.append(" AND obj.createDate Like :createDate "); //java.sql.Timestamp
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate())) {
			sb.append(" AND obj.modifyDate Like :modifyDate "); //java.sql.Timestamp
		}
		if ( data.getGiftPrice() != null ) {
			sb.append(" AND obj.giftPrice >= :giftPrice "); // java.math.BigDecimal
		}
		if ( data.getStartDate() != null && !"".equals(data.getStartDate())) {
			sb.append(" AND obj.startDate Like :startDate "); //java.util.Date
		}
		Query q;
		List<ChargeModeCycleAddEntity> results;
		try {
			logger.debug("JpaChargeModeCycleAddDaoImpl searchLike  query : "+sb.toString());
			q = entityManager.createQuery(sb.toString());
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		} catch (IllegalArgumentException iae){
			//	RuntimeException
			iae.printStackTrace();
			throw new DaoSystemException("JPA10002-"+iae.getMessage(),iae);
		}
		if ( data.getAdditionId() != null && !"".equals(data.getAdditionId()) ) {
			q.setParameter("additionId", data.getAdditionId()+"%");
		}
		if ( data.getEndDate() != null && !"".equals(data.getEndDate()) ) {
			q.setParameter("endDate", data.getEndDate()+"%");
		}
		if ( data.getRealStartDate() != null && !"".equals(data.getRealStartDate()) ) {
			q.setParameter("realStartDate", data.getRealStartDate()+"%");
		}
		if ( data.getFreeMonth() != null && !"".equals(data.getFreeMonth()) ) {
			q.setParameter("freeMonth", data.getFreeMonth()+"%");
		}
		if ( data.getAdditionQuantity() != null && !"".equals(data.getAdditionQuantity()) ) {
			q.setParameter("additionQuantity", data.getAdditionQuantity()+"%");
		}
		if ( data.getCreatorId() != null && !"".equals(data.getCreatorId()) ) {
			q.setParameter("creatorId", data.getCreatorId()+"%");
		}
		if ( data.getModifierId() != null && !"".equals(data.getModifierId()) ) {
			q.setParameter("modifierId", data.getModifierId()+"%");
		}
		if ( data.getRealEndDate() != null && !"".equals(data.getRealEndDate()) ) {
			q.setParameter("realEndDate", data.getRealEndDate()+"%");
		}
		if ( data.getCreateDate() != null && !"".equals(data.getCreateDate()) ) {
			q.setParameter("createDate", data.getCreateDate()+"%");
		}
		if ( data.getModifyDate() != null && !"".equals(data.getModifyDate()) ) {
			q.setParameter("modifyDate", data.getModifyDate()+"%");
		}
		if ( data.getGiftPrice() != null ) {
			q.setParameter("giftPrice", data.getGiftPrice());
		}  	
		if ( data.getStartDate() != null && !"".equals(data.getStartDate()) ) {
			q.setParameter("startDate", data.getStartDate()+"%");
		}
		try {
			results = q.getResultList();
		} catch (IllegalStateException ise){
			//	RuntimeException
			ise.printStackTrace();
			throw new DaoSystemException("JPA10001-"+ise.getMessage(),ise);
		}
		
		return results;
	}	
	
}
