/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
import com.gateweb.charge.repository.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import com.meshinnovation.db.dao.exception.DaoSystemException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Collection;
import javax.persistence.Query;
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CashDetail
 */
//@Repository("cashDetailRepositoryCustom")
public class CashDetailRepositoryImpl implements CashDetailRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	CashDetailRepository cashDetailRepository;
	
	public CashDetailRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchWithVo(CashDetailEntity vo) {
		log.debug("CashDetailRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashDetailEntity cashDetailEntity = QCashDetailEntity.cashDetailEntity;

		if ( vo.getNoTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.noTaxInclusivePrice.eq(vo.getNoTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getTaxPrice() != null ) {
			builder.and(cashDetailEntity.taxPrice.eq(vo.getTaxPrice())); //java.math.BigDecimal
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(cashDetailEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getTaxRate() != null ) {
			builder.and(cashDetailEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getCashType() != null ) {
			builder.and(cashDetailEntity.cashType.eq(vo.getCashType())); //java.lang.Integer
		}	
		if ( vo.getBillType() != null ) {
			builder.and(cashDetailEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCalYm() != null && !"".equals(vo.getCalYm())) {
			builder.and(cashDetailEntity.calYm.equalsIgnoreCase(vo.getCalYm())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(cashDetailEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(cashDetailEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashDetailEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCommissionAmount() != null ) {
			builder.and(cashDetailEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashDetailEntity.isFirst.equalsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getDiffPriceNote() != null && !"".equals(vo.getDiffPriceNote())) {
			builder.and(cashDetailEntity.diffPriceNote.equalsIgnoreCase(vo.getDiffPriceNote())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(cashDetailEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.taxInclusivePrice.eq(vo.getTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashDetailEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashDetailEntity.taxType.equalsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashDetailEntity.outYm.equalsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getCreatorId() != null ) {
			builder.and(cashDetailEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashDetailEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCashDetailId() != null ) {
			builder.and(cashDetailEntity.cashDetailId.eq(vo.getCashDetailId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(cashDetailEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getOrgPrice() != null ) {
			builder.and(cashDetailEntity.orgPrice.eq(vo.getOrgPrice())); //java.math.BigDecimal
		}	
		if ( vo.getDiffPrice() != null ) {
			builder.and(cashDetailEntity.diffPrice.eq(vo.getDiffPrice())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null ) {
			builder.and(cashDetailEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		log.debug("CashDetailRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashDetailRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchWithVo(CashDetailEntity vo, Pageable pageable) {
		log.debug("CashDetailRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashDetailEntity cashDetailEntity = QCashDetailEntity.cashDetailEntity;

		if ( vo.getNoTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.noTaxInclusivePrice.eq(vo.getNoTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getTaxPrice() != null ) {
			builder.and(cashDetailEntity.taxPrice.eq(vo.getTaxPrice())); //java.math.BigDecimal
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(cashDetailEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getTaxRate() != null ) {
			builder.and(cashDetailEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getCashType() != null ) {
			builder.and(cashDetailEntity.cashType.eq(vo.getCashType())); //java.lang.Integer
		}	
		if ( vo.getBillType() != null ) {
			builder.and(cashDetailEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCalYm() != null && !"".equals(vo.getCalYm())) {
			builder.and(cashDetailEntity.calYm.equalsIgnoreCase(vo.getCalYm())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(cashDetailEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(cashDetailEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashDetailEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCommissionAmount() != null ) {
			builder.and(cashDetailEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashDetailEntity.isFirst.equalsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getDiffPriceNote() != null && !"".equals(vo.getDiffPriceNote())) {
			builder.and(cashDetailEntity.diffPriceNote.equalsIgnoreCase(vo.getDiffPriceNote())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(cashDetailEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.taxInclusivePrice.eq(vo.getTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashDetailEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashDetailEntity.taxType.equalsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashDetailEntity.outYm.equalsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getCreatorId() != null ) {
			builder.and(cashDetailEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashDetailEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCashDetailId() != null ) {
			builder.and(cashDetailEntity.cashDetailId.eq(vo.getCashDetailId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(cashDetailEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getOrgPrice() != null ) {
			builder.and(cashDetailEntity.orgPrice.eq(vo.getOrgPrice())); //java.math.BigDecimal
		}	
		if ( vo.getDiffPrice() != null ) {
			builder.and(cashDetailEntity.diffPrice.eq(vo.getDiffPrice())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null ) {
			builder.and(cashDetailEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		log.debug("CashDetailRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashDetailRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchWithVo(CashDetailEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchLikeVo(CashDetailEntity vo) {
		log.debug("CashDetailRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashDetailEntity cashDetailEntity = QCashDetailEntity.cashDetailEntity;

		if ( vo.getNoTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.noTaxInclusivePrice.eq(vo.getNoTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getTaxPrice() != null ) {
			builder.and(cashDetailEntity.taxPrice.eq(vo.getTaxPrice())); //java.math.BigDecimal
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(cashDetailEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getTaxRate() != null ) {
			builder.and(cashDetailEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getCashType() != null ) {
			builder.and(cashDetailEntity.cashType.eq(vo.getCashType())); //java.lang.Integer
		}	
		if ( vo.getBillType() != null ) {
			builder.and(cashDetailEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCalYm() != null && !"".equals(vo.getCalYm())) {
			builder.and(cashDetailEntity.calYm.containsIgnoreCase(vo.getCalYm())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(cashDetailEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(cashDetailEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashDetailEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCommissionAmount() != null ) {
			builder.and(cashDetailEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashDetailEntity.isFirst.containsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getDiffPriceNote() != null && !"".equals(vo.getDiffPriceNote())) {
			builder.and(cashDetailEntity.diffPriceNote.containsIgnoreCase(vo.getDiffPriceNote())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(cashDetailEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.taxInclusivePrice.eq(vo.getTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashDetailEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashDetailEntity.taxType.containsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashDetailEntity.outYm.containsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getCreatorId() != null ) {
			builder.and(cashDetailEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashDetailEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCashDetailId() != null ) {
			builder.and(cashDetailEntity.cashDetailId.eq(vo.getCashDetailId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(cashDetailEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getOrgPrice() != null ) {
			builder.and(cashDetailEntity.orgPrice.eq(vo.getOrgPrice())); //java.math.BigDecimal
		}	
		if ( vo.getDiffPrice() != null ) {
			builder.and(cashDetailEntity.diffPrice.eq(vo.getDiffPrice())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null ) {
			builder.and(cashDetailEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		log.debug("CashDetailRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashDetailRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchLikeVo(CashDetailEntity vo, Pageable pageable) {
		log.debug("CashDetailRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashDetailEntity cashDetailEntity = QCashDetailEntity.cashDetailEntity;

		if ( vo.getNoTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.noTaxInclusivePrice.eq(vo.getNoTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getTaxPrice() != null ) {
			builder.and(cashDetailEntity.taxPrice.eq(vo.getTaxPrice())); //java.math.BigDecimal
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(cashDetailEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getTaxRate() != null ) {
			builder.and(cashDetailEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getCashType() != null ) {
			builder.and(cashDetailEntity.cashType.eq(vo.getCashType())); //java.lang.Integer
		}	
		if ( vo.getBillType() != null ) {
			builder.and(cashDetailEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCalYm() != null && !"".equals(vo.getCalYm())) {
			builder.and(cashDetailEntity.calYm.containsIgnoreCase(vo.getCalYm())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(cashDetailEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(cashDetailEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashDetailEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCommissionAmount() != null ) {
			builder.and(cashDetailEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashDetailEntity.isFirst.containsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getDiffPriceNote() != null && !"".equals(vo.getDiffPriceNote())) {
			builder.and(cashDetailEntity.diffPriceNote.containsIgnoreCase(vo.getDiffPriceNote())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(cashDetailEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getTaxInclusivePrice() != null ) {
			builder.and(cashDetailEntity.taxInclusivePrice.eq(vo.getTaxInclusivePrice())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashDetailEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashDetailEntity.taxType.containsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashDetailEntity.outYm.containsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getCreatorId() != null ) {
			builder.and(cashDetailEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashDetailEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCashDetailId() != null ) {
			builder.and(cashDetailEntity.cashDetailId.eq(vo.getCashDetailId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(cashDetailEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getOrgPrice() != null ) {
			builder.and(cashDetailEntity.orgPrice.eq(vo.getOrgPrice())); //java.math.BigDecimal
		}	
		if ( vo.getDiffPrice() != null ) {
			builder.and(cashDetailEntity.diffPrice.eq(vo.getDiffPrice())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null ) {
			builder.and(cashDetailEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		log.debug("CashDetailRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashDetailRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<CashDetailEntity> searchLikeVo(CashDetailEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
