/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
import com.gateweb.charge.repository.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import com.meshinnovation.db.dao.exception.DaoSystemException;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of InvoiceType
 */
//@Repository("invoiceTypeRepositoryCustom")
public class InvoiceTypeRepositoryImpl implements InvoiceTypeRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Logger logger = LogManager.getLogger(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	InvoiceTypeRepository invoiceTypeRepository;
	
	public InvoiceTypeRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchWithVo(InvoiceTypeEntity vo) {
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceTypeEntity invoiceTypeEntity = QInvoiceTypeEntity.invoiceTypeEntity;

		if ( vo.getTypeFormat() != null && !"".equals(vo.getTypeFormat())) {
			builder.and(invoiceTypeEntity.typeFormat.equalsIgnoreCase(vo.getTypeFormat())); //java.lang.String
		}
		if ( vo.getDescription() != null && !"".equals(vo.getDescription())) {
			builder.and(invoiceTypeEntity.description.equalsIgnoreCase(vo.getDescription())); //java.lang.String
		}
		if ( vo.getInvoiceNumber() != null ) {
			builder.and(invoiceTypeEntity.invoiceNumber.eq(vo.getInvoiceNumber())); //java.lang.Integer
		}	
		if ( vo.getTypeCode() != null && !"".equals(vo.getTypeCode())) {
			builder.and(invoiceTypeEntity.typeCode.equalsIgnoreCase(vo.getTypeCode())); //java.lang.String
		}
		if ( vo.getOutFormat() != null && !"".equals(vo.getOutFormat())) {
			builder.and(invoiceTypeEntity.outFormat.equalsIgnoreCase(vo.getOutFormat())); //java.lang.String
		}
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceTypeRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchWithVo(InvoiceTypeEntity vo, Pageable pageable) {
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceTypeEntity invoiceTypeEntity = QInvoiceTypeEntity.invoiceTypeEntity;

		if ( vo.getTypeFormat() != null && !"".equals(vo.getTypeFormat())) {
			builder.and(invoiceTypeEntity.typeFormat.equalsIgnoreCase(vo.getTypeFormat())); //java.lang.String
		}
		if ( vo.getDescription() != null && !"".equals(vo.getDescription())) {
			builder.and(invoiceTypeEntity.description.equalsIgnoreCase(vo.getDescription())); //java.lang.String
		}
		if ( vo.getInvoiceNumber() != null ) {
			builder.and(invoiceTypeEntity.invoiceNumber.eq(vo.getInvoiceNumber())); //java.lang.Integer
		}	
		if ( vo.getTypeCode() != null && !"".equals(vo.getTypeCode())) {
			builder.and(invoiceTypeEntity.typeCode.equalsIgnoreCase(vo.getTypeCode())); //java.lang.String
		}
		if ( vo.getOutFormat() != null && !"".equals(vo.getOutFormat())) {
			builder.and(invoiceTypeEntity.outFormat.equalsIgnoreCase(vo.getOutFormat())); //java.lang.String
		}
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceTypeRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchWithVo(InvoiceTypeEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchLikeVo(InvoiceTypeEntity vo) {
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceTypeEntity invoiceTypeEntity = QInvoiceTypeEntity.invoiceTypeEntity;

		if ( vo.getTypeFormat() != null && !"".equals(vo.getTypeFormat())) {
			builder.and(invoiceTypeEntity.typeFormat.containsIgnoreCase(vo.getTypeFormat())); //java.lang.String
		}
		if ( vo.getDescription() != null && !"".equals(vo.getDescription())) {
			builder.and(invoiceTypeEntity.description.containsIgnoreCase(vo.getDescription())); //java.lang.String
		}
		if ( vo.getInvoiceNumber() != null ) {
			builder.and(invoiceTypeEntity.invoiceNumber.eq(vo.getInvoiceNumber())); //java.lang.Integer
		}	
		if ( vo.getTypeCode() != null && !"".equals(vo.getTypeCode())) {
			builder.and(invoiceTypeEntity.typeCode.containsIgnoreCase(vo.getTypeCode())); //java.lang.String
		}
		if ( vo.getOutFormat() != null && !"".equals(vo.getOutFormat())) {
			builder.and(invoiceTypeEntity.outFormat.containsIgnoreCase(vo.getOutFormat())); //java.lang.String
		}
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceTypeRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchLikeVo(InvoiceTypeEntity vo, Pageable pageable) {
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceTypeEntity invoiceTypeEntity = QInvoiceTypeEntity.invoiceTypeEntity;

		if ( vo.getTypeFormat() != null && !"".equals(vo.getTypeFormat())) {
			builder.and(invoiceTypeEntity.typeFormat.containsIgnoreCase(vo.getTypeFormat())); //java.lang.String
		}
		if ( vo.getDescription() != null && !"".equals(vo.getDescription())) {
			builder.and(invoiceTypeEntity.description.containsIgnoreCase(vo.getDescription())); //java.lang.String
		}
		if ( vo.getInvoiceNumber() != null ) {
			builder.and(invoiceTypeEntity.invoiceNumber.eq(vo.getInvoiceNumber())); //java.lang.Integer
		}	
		if ( vo.getTypeCode() != null && !"".equals(vo.getTypeCode())) {
			builder.and(invoiceTypeEntity.typeCode.containsIgnoreCase(vo.getTypeCode())); //java.lang.String
		}
		if ( vo.getOutFormat() != null && !"".equals(vo.getOutFormat())) {
			builder.and(invoiceTypeEntity.outFormat.containsIgnoreCase(vo.getOutFormat())); //java.lang.String
		}
		logger.debug("InvoiceTypeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceTypeRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<InvoiceTypeEntity> searchLikeVo(InvoiceTypeEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
