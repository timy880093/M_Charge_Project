/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
import com.gateweb.charge.repository.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import com.meshinnovation.db.dao.exception.DaoSystemException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Collection;
import javax.persistence.Query;
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of Grade
 */
//@Repository("gradeRepositoryCustom")
public class GradeRepositoryImpl implements GradeRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	GradeRepository gradeRepository;
	
	public GradeRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchWithVo(GradeEntity vo) {
		log.debug("GradeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QGradeEntity gradeEntity = QGradeEntity.gradeEntity;

		if ( vo.getGradeId() != null ) {
			builder.and(gradeEntity.gradeId.eq(vo.getGradeId())); //java.lang.Integer
		}	
		if ( vo.getChargeId() != null ) {
			builder.and(gradeEntity.chargeId.eq(vo.getChargeId())); //java.lang.Integer
		}	
		if ( vo.getPrice() != null ) {
			builder.and(gradeEntity.price.eq(vo.getPrice())); //java.lang.Integer
		}	
		if ( vo.getCntEnd() != null ) {
			builder.and(gradeEntity.cntEnd.eq(vo.getCntEnd())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(gradeEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(gradeEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(gradeEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(gradeEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCntStart() != null ) {
			builder.and(gradeEntity.cntStart.eq(vo.getCntStart())); //java.lang.Integer
		}	
		log.debug("GradeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(gradeRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchWithVo(GradeEntity vo, Pageable pageable) {
		log.debug("GradeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QGradeEntity gradeEntity = QGradeEntity.gradeEntity;

		if ( vo.getGradeId() != null ) {
			builder.and(gradeEntity.gradeId.eq(vo.getGradeId())); //java.lang.Integer
		}	
		if ( vo.getChargeId() != null ) {
			builder.and(gradeEntity.chargeId.eq(vo.getChargeId())); //java.lang.Integer
		}	
		if ( vo.getPrice() != null ) {
			builder.and(gradeEntity.price.eq(vo.getPrice())); //java.lang.Integer
		}	
		if ( vo.getCntEnd() != null ) {
			builder.and(gradeEntity.cntEnd.eq(vo.getCntEnd())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(gradeEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(gradeEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(gradeEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(gradeEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCntStart() != null ) {
			builder.and(gradeEntity.cntStart.eq(vo.getCntStart())); //java.lang.Integer
		}	
		log.debug("GradeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(gradeRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchWithVo(GradeEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchLikeVo(GradeEntity vo) {
		log.debug("GradeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QGradeEntity gradeEntity = QGradeEntity.gradeEntity;

		if ( vo.getGradeId() != null ) {
			builder.and(gradeEntity.gradeId.eq(vo.getGradeId())); //java.lang.Integer
		}	
		if ( vo.getChargeId() != null ) {
			builder.and(gradeEntity.chargeId.eq(vo.getChargeId())); //java.lang.Integer
		}	
		if ( vo.getPrice() != null ) {
			builder.and(gradeEntity.price.eq(vo.getPrice())); //java.lang.Integer
		}	
		if ( vo.getCntEnd() != null ) {
			builder.and(gradeEntity.cntEnd.eq(vo.getCntEnd())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(gradeEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(gradeEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(gradeEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(gradeEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCntStart() != null ) {
			builder.and(gradeEntity.cntStart.eq(vo.getCntStart())); //java.lang.Integer
		}	
		log.debug("GradeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(gradeRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchLikeVo(GradeEntity vo, Pageable pageable) {
		log.debug("GradeRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QGradeEntity gradeEntity = QGradeEntity.gradeEntity;

		if ( vo.getGradeId() != null ) {
			builder.and(gradeEntity.gradeId.eq(vo.getGradeId())); //java.lang.Integer
		}	
		if ( vo.getChargeId() != null ) {
			builder.and(gradeEntity.chargeId.eq(vo.getChargeId())); //java.lang.Integer
		}	
		if ( vo.getPrice() != null ) {
			builder.and(gradeEntity.price.eq(vo.getPrice())); //java.lang.Integer
		}	
		if ( vo.getCntEnd() != null ) {
			builder.and(gradeEntity.cntEnd.eq(vo.getCntEnd())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(gradeEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(gradeEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(gradeEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(gradeEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCntStart() != null ) {
			builder.and(gradeEntity.cntStart.eq(vo.getCntStart())); //java.lang.Integer
		}	
		log.debug("GradeRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(gradeRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<GradeEntity> searchLikeVo(GradeEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
