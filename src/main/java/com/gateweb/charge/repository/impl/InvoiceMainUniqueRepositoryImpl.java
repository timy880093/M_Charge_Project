/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Oct 31 09:15:12 CST 2017
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.charge.model.InvoiceMainUniqueEntity;
import com.gateweb.charge.model.QInvoiceMainUniqueEntity;
import com.gateweb.charge.repository.InvoiceMainUniqueRepository;
import com.gateweb.charge.repository.InvoiceMainUniqueRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of InvoiceMainUnique
 */
//@Repository("invoiceMainUniqueRepositoryCustom")
public class InvoiceMainUniqueRepositoryImpl implements InvoiceMainUniqueRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Logger logger = LogManager.getLogger(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	InvoiceMainUniqueRepository invoiceMainUniqueRepository;
	
	public InvoiceMainUniqueRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchWithVo(InvoiceMainUniqueEntity vo) {
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceMainUniqueEntity invoiceMainUniqueEntity = QInvoiceMainUniqueEntity.invoiceMainUniqueEntity;

		if ( vo.getId().getYearMonth() != null && !"".equals(vo.getId().getYearMonth())) {
			builder.and(invoiceMainUniqueEntity.id.yearMonth.equalsIgnoreCase(vo.getId().getYearMonth())); //java.lang.String
		}
		if ( vo.getCompanyId() != null ) {
			builder.and(invoiceMainUniqueEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}
		if ( vo.getInvoiceType() != null && !"".equals(vo.getInvoiceType())) {
			builder.and(invoiceMainUniqueEntity.invoiceType.equalsIgnoreCase(vo.getInvoiceType())); //java.lang.String
		}
		if ( vo.getId().getInvoiceNumber() != null && !"".equals(vo.getId().getInvoiceNumber())) {
			builder.and(invoiceMainUniqueEntity.id.invoiceNumber.equalsIgnoreCase(vo.getId().getInvoiceNumber())); //java.lang.String
		}
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceMainUniqueRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchWithVo(InvoiceMainUniqueEntity vo, Pageable pageable) {
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceMainUniqueEntity invoiceMainUniqueEntity = QInvoiceMainUniqueEntity.invoiceMainUniqueEntity;

		if ( vo.getId().getYearMonth() != null && !"".equals(vo.getId().getYearMonth())) {
			builder.and(invoiceMainUniqueEntity.id.yearMonth.equalsIgnoreCase(vo.getId().getYearMonth())); //java.lang.String
		}
		if ( vo.getCompanyId() != null ) {
			builder.and(invoiceMainUniqueEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}
		if ( vo.getInvoiceType() != null && !"".equals(vo.getInvoiceType())) {
			builder.and(invoiceMainUniqueEntity.invoiceType.equalsIgnoreCase(vo.getInvoiceType())); //java.lang.String
		}
		if ( vo.getId().getInvoiceNumber() != null && !"".equals(vo.getId().getInvoiceNumber())) {
			builder.and(invoiceMainUniqueEntity.id.invoiceNumber.equalsIgnoreCase(vo.getId().getInvoiceNumber())); //java.lang.String
		}
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceMainUniqueRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchWithVo(InvoiceMainUniqueEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchLikeVo(InvoiceMainUniqueEntity vo) {
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceMainUniqueEntity invoiceMainUniqueEntity = QInvoiceMainUniqueEntity.invoiceMainUniqueEntity;

		if ( vo.getId().getYearMonth() != null && !"".equals(vo.getId().getYearMonth())) {
			builder.and(invoiceMainUniqueEntity.id.yearMonth.containsIgnoreCase(vo.getId().getYearMonth())); //java.lang.String
		}
		if ( vo.getCompanyId() != null ) {
			builder.and(invoiceMainUniqueEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}
		if ( vo.getInvoiceType() != null && !"".equals(vo.getInvoiceType())) {
			builder.and(invoiceMainUniqueEntity.invoiceType.containsIgnoreCase(vo.getInvoiceType())); //java.lang.String
		}
		if ( vo.getId().getInvoiceNumber() != null && !"".equals(vo.getId().getInvoiceNumber())) {
			builder.and(invoiceMainUniqueEntity.id.invoiceNumber.containsIgnoreCase(vo.getId().getInvoiceNumber())); //java.lang.String
		}
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceMainUniqueRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchLikeVo(InvoiceMainUniqueEntity vo, Pageable pageable) {
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QInvoiceMainUniqueEntity invoiceMainUniqueEntity = QInvoiceMainUniqueEntity.invoiceMainUniqueEntity;

		if ( vo.getId().getYearMonth() != null && !"".equals(vo.getId().getYearMonth())) {
			builder.and(invoiceMainUniqueEntity.id.yearMonth.containsIgnoreCase(vo.getId().getYearMonth())); //java.lang.String
		}
		if ( vo.getCompanyId() != null ) {
			builder.and(invoiceMainUniqueEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}
		if ( vo.getInvoiceType() != null && !"".equals(vo.getInvoiceType())) {
			builder.and(invoiceMainUniqueEntity.invoiceType.containsIgnoreCase(vo.getInvoiceType())); //java.lang.String
		}
		if ( vo.getId().getInvoiceNumber() != null && !"".equals(vo.getId().getInvoiceNumber())) {
			builder.and(invoiceMainUniqueEntity.id.invoiceNumber.containsIgnoreCase(vo.getId().getInvoiceNumber())); //java.lang.String
		}
		logger.debug("InvoiceMainUniqueRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(invoiceMainUniqueRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<InvoiceMainUniqueEntity> searchLikeVo(InvoiceMainUniqueEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
