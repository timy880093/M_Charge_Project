/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.charge.model.BillCycleEntity;
import com.gateweb.charge.model.QBillCycleEntity;
import com.gateweb.charge.repository.BillCycleRepository;
import com.gateweb.charge.repository.BillCycleRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of BillCycle
 */
//@Repository("billCycleRepositoryCustom")
public class BillCycleRepositoryImpl implements BillCycleRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Log log = LogFactory.getLog(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	BillCycleRepository billCycleRepository;
	
	public BillCycleRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchWithVo(BillCycleEntity vo) {
		log.debug("BillCycleRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QBillCycleEntity billCycleEntity = QBillCycleEntity.billCycleEntity;

		if ( vo.getCntOver() != null ) {
			builder.and(billCycleEntity.cntOver.eq(vo.getCntOver())); //java.lang.Integer
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(billCycleEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getCashInOverId() != null ) {
			builder.and(billCycleEntity.cashInOverId.eq(vo.getCashInOverId())); //java.lang.Integer
		}	
		if ( vo.getPayMonth() != null ) {
			builder.and(billCycleEntity.payMonth.eq(vo.getPayMonth())); //java.math.BigDecimal
		}	
		if ( vo.getPriceOver() != null ) {
			builder.and(billCycleEntity.priceOver.eq(vo.getPriceOver())); //java.math.BigDecimal
		}	
		if ( vo.getSinglePrice() != null ) {
			builder.and(billCycleEntity.singlePrice.eq(vo.getSinglePrice())); //java.math.BigDecimal
		}	
		if ( vo.getPrice() != null ) {
			builder.and(billCycleEntity.price.eq(vo.getPrice())); //java.math.BigDecimal
		}	
		if ( vo.getBillType() != null ) {
			builder.and(billCycleEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCntGift() != null ) {
			builder.and(billCycleEntity.cntGift.eq(vo.getCntGift())); //java.lang.Integer
		}	
		if ( vo.getCashInMonthId() != null ) {
			builder.and(billCycleEntity.cashInMonthId.eq(vo.getCashInMonthId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(billCycleEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(billCycleEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getYearMonth() != null && !"".equals(vo.getYearMonth())) {
			builder.and(billCycleEntity.yearMonth.equalsIgnoreCase(vo.getYearMonth())); //java.lang.String
		}
		if ( vo.getPayOver() != null ) {
			builder.and(billCycleEntity.payOver.eq(vo.getPayOver())); //java.math.BigDecimal
		}	
		if ( vo.getCashOutMonthId() != null ) {
			builder.and(billCycleEntity.cashOutMonthId.eq(vo.getCashOutMonthId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(billCycleEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCnt() != null ) {
			builder.and(billCycleEntity.cnt.eq(vo.getCnt())); //java.lang.Integer
		}	
		if ( vo.getCntLimit() != null ) {
			builder.and(billCycleEntity.cntLimit.eq(vo.getCntLimit())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(billCycleEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(billCycleEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getIsPriceFree() != null && !"".equals(vo.getIsPriceFree())) {
			builder.and(billCycleEntity.isPriceFree.equalsIgnoreCase(vo.getIsPriceFree())); //java.lang.String
		}
		if ( vo.getCashOutOverId() != null ) {
			builder.and(billCycleEntity.cashOutOverId.eq(vo.getCashOutOverId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(billCycleEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getPriceMax() != null ) {
			builder.and(billCycleEntity.priceMax.eq(vo.getPriceMax())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null && !"".equals(vo.getStatus())) {
			builder.and(billCycleEntity.status.equalsIgnoreCase(vo.getStatus())); //java.lang.String
		}
		log.debug("BillCycleRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(billCycleRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchWithVo(BillCycleEntity vo, Pageable pageable) {
		log.debug("BillCycleRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QBillCycleEntity billCycleEntity = QBillCycleEntity.billCycleEntity;

		if ( vo.getCntOver() != null ) {
			builder.and(billCycleEntity.cntOver.eq(vo.getCntOver())); //java.lang.Integer
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(billCycleEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getCashInOverId() != null ) {
			builder.and(billCycleEntity.cashInOverId.eq(vo.getCashInOverId())); //java.lang.Integer
		}	
		if ( vo.getPayMonth() != null ) {
			builder.and(billCycleEntity.payMonth.eq(vo.getPayMonth())); //java.math.BigDecimal
		}	
		if ( vo.getPriceOver() != null ) {
			builder.and(billCycleEntity.priceOver.eq(vo.getPriceOver())); //java.math.BigDecimal
		}	
		if ( vo.getSinglePrice() != null ) {
			builder.and(billCycleEntity.singlePrice.eq(vo.getSinglePrice())); //java.math.BigDecimal
		}	
		if ( vo.getPrice() != null ) {
			builder.and(billCycleEntity.price.eq(vo.getPrice())); //java.math.BigDecimal
		}	
		if ( vo.getBillType() != null ) {
			builder.and(billCycleEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCntGift() != null ) {
			builder.and(billCycleEntity.cntGift.eq(vo.getCntGift())); //java.lang.Integer
		}	
		if ( vo.getCashInMonthId() != null ) {
			builder.and(billCycleEntity.cashInMonthId.eq(vo.getCashInMonthId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(billCycleEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(billCycleEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getYearMonth() != null && !"".equals(vo.getYearMonth())) {
			builder.and(billCycleEntity.yearMonth.equalsIgnoreCase(vo.getYearMonth())); //java.lang.String
		}
		if ( vo.getPayOver() != null ) {
			builder.and(billCycleEntity.payOver.eq(vo.getPayOver())); //java.math.BigDecimal
		}	
		if ( vo.getCashOutMonthId() != null ) {
			builder.and(billCycleEntity.cashOutMonthId.eq(vo.getCashOutMonthId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(billCycleEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCnt() != null ) {
			builder.and(billCycleEntity.cnt.eq(vo.getCnt())); //java.lang.Integer
		}	
		if ( vo.getCntLimit() != null ) {
			builder.and(billCycleEntity.cntLimit.eq(vo.getCntLimit())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(billCycleEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(billCycleEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getIsPriceFree() != null && !"".equals(vo.getIsPriceFree())) {
			builder.and(billCycleEntity.isPriceFree.equalsIgnoreCase(vo.getIsPriceFree())); //java.lang.String
		}
		if ( vo.getCashOutOverId() != null ) {
			builder.and(billCycleEntity.cashOutOverId.eq(vo.getCashOutOverId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(billCycleEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getPriceMax() != null ) {
			builder.and(billCycleEntity.priceMax.eq(vo.getPriceMax())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null && !"".equals(vo.getStatus())) {
			builder.and(billCycleEntity.status.equalsIgnoreCase(vo.getStatus())); //java.lang.String
		}
		log.debug("BillCycleRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(billCycleRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchWithVo(BillCycleEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchLikeVo(BillCycleEntity vo) {
		log.debug("BillCycleRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QBillCycleEntity billCycleEntity = QBillCycleEntity.billCycleEntity;

		if ( vo.getCntOver() != null ) {
			builder.and(billCycleEntity.cntOver.eq(vo.getCntOver())); //java.lang.Integer
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(billCycleEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getCashInOverId() != null ) {
			builder.and(billCycleEntity.cashInOverId.eq(vo.getCashInOverId())); //java.lang.Integer
		}	
		if ( vo.getPayMonth() != null ) {
			builder.and(billCycleEntity.payMonth.eq(vo.getPayMonth())); //java.math.BigDecimal
		}	
		if ( vo.getPriceOver() != null ) {
			builder.and(billCycleEntity.priceOver.eq(vo.getPriceOver())); //java.math.BigDecimal
		}	
		if ( vo.getSinglePrice() != null ) {
			builder.and(billCycleEntity.singlePrice.eq(vo.getSinglePrice())); //java.math.BigDecimal
		}	
		if ( vo.getPrice() != null ) {
			builder.and(billCycleEntity.price.eq(vo.getPrice())); //java.math.BigDecimal
		}	
		if ( vo.getBillType() != null ) {
			builder.and(billCycleEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCntGift() != null ) {
			builder.and(billCycleEntity.cntGift.eq(vo.getCntGift())); //java.lang.Integer
		}	
		if ( vo.getCashInMonthId() != null ) {
			builder.and(billCycleEntity.cashInMonthId.eq(vo.getCashInMonthId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(billCycleEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(billCycleEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getYearMonth() != null && !"".equals(vo.getYearMonth())) {
			builder.and(billCycleEntity.yearMonth.containsIgnoreCase(vo.getYearMonth())); //java.lang.String
		}
		if ( vo.getPayOver() != null ) {
			builder.and(billCycleEntity.payOver.eq(vo.getPayOver())); //java.math.BigDecimal
		}	
		if ( vo.getCashOutMonthId() != null ) {
			builder.and(billCycleEntity.cashOutMonthId.eq(vo.getCashOutMonthId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(billCycleEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCnt() != null ) {
			builder.and(billCycleEntity.cnt.eq(vo.getCnt())); //java.lang.Integer
		}	
		if ( vo.getCntLimit() != null ) {
			builder.and(billCycleEntity.cntLimit.eq(vo.getCntLimit())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(billCycleEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(billCycleEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getIsPriceFree() != null && !"".equals(vo.getIsPriceFree())) {
			builder.and(billCycleEntity.isPriceFree.containsIgnoreCase(vo.getIsPriceFree())); //java.lang.String
		}
		if ( vo.getCashOutOverId() != null ) {
			builder.and(billCycleEntity.cashOutOverId.eq(vo.getCashOutOverId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(billCycleEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getPriceMax() != null ) {
			builder.and(billCycleEntity.priceMax.eq(vo.getPriceMax())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null && !"".equals(vo.getStatus())) {
			builder.and(billCycleEntity.status.containsIgnoreCase(vo.getStatus())); //java.lang.String
		}
		log.debug("BillCycleRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(billCycleRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchLikeVo(BillCycleEntity vo, Pageable pageable) {
		log.debug("BillCycleRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QBillCycleEntity billCycleEntity = QBillCycleEntity.billCycleEntity;

		if ( vo.getCntOver() != null ) {
			builder.and(billCycleEntity.cntOver.eq(vo.getCntOver())); //java.lang.Integer
		}	
		if ( vo.getPackageId() != null ) {
			builder.and(billCycleEntity.packageId.eq(vo.getPackageId())); //java.lang.Integer
		}	
		if ( vo.getCashInOverId() != null ) {
			builder.and(billCycleEntity.cashInOverId.eq(vo.getCashInOverId())); //java.lang.Integer
		}	
		if ( vo.getPayMonth() != null ) {
			builder.and(billCycleEntity.payMonth.eq(vo.getPayMonth())); //java.math.BigDecimal
		}	
		if ( vo.getPriceOver() != null ) {
			builder.and(billCycleEntity.priceOver.eq(vo.getPriceOver())); //java.math.BigDecimal
		}	
		if ( vo.getSinglePrice() != null ) {
			builder.and(billCycleEntity.singlePrice.eq(vo.getSinglePrice())); //java.math.BigDecimal
		}	
		if ( vo.getPrice() != null ) {
			builder.and(billCycleEntity.price.eq(vo.getPrice())); //java.math.BigDecimal
		}	
		if ( vo.getBillType() != null ) {
			builder.and(billCycleEntity.billType.eq(vo.getBillType())); //java.lang.Integer
		}	
		if ( vo.getCntGift() != null ) {
			builder.and(billCycleEntity.cntGift.eq(vo.getCntGift())); //java.lang.Integer
		}	
		if ( vo.getCashInMonthId() != null ) {
			builder.and(billCycleEntity.cashInMonthId.eq(vo.getCashInMonthId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(billCycleEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getBillId() != null ) {
			builder.and(billCycleEntity.billId.eq(vo.getBillId())); //java.lang.Integer
		}	
		if ( vo.getYearMonth() != null && !"".equals(vo.getYearMonth())) {
			builder.and(billCycleEntity.yearMonth.containsIgnoreCase(vo.getYearMonth())); //java.lang.String
		}
		if ( vo.getPayOver() != null ) {
			builder.and(billCycleEntity.payOver.eq(vo.getPayOver())); //java.math.BigDecimal
		}	
		if ( vo.getCashOutMonthId() != null ) {
			builder.and(billCycleEntity.cashOutMonthId.eq(vo.getCashOutMonthId())); //java.lang.Integer
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(billCycleEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCnt() != null ) {
			builder.and(billCycleEntity.cnt.eq(vo.getCnt())); //java.lang.Integer
		}	
		if ( vo.getCntLimit() != null ) {
			builder.and(billCycleEntity.cntLimit.eq(vo.getCntLimit())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(billCycleEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(billCycleEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getIsPriceFree() != null && !"".equals(vo.getIsPriceFree())) {
			builder.and(billCycleEntity.isPriceFree.containsIgnoreCase(vo.getIsPriceFree())); //java.lang.String
		}
		if ( vo.getCashOutOverId() != null ) {
			builder.and(billCycleEntity.cashOutOverId.eq(vo.getCashOutOverId())); //java.lang.Integer
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(billCycleEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getPriceMax() != null ) {
			builder.and(billCycleEntity.priceMax.eq(vo.getPriceMax())); //java.math.BigDecimal
		}	
		if ( vo.getStatus() != null && !"".equals(vo.getStatus())) {
			builder.and(billCycleEntity.status.containsIgnoreCase(vo.getStatus())); //java.lang.String
		}
		log.debug("BillCycleRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(billCycleRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<BillCycleEntity> searchLikeVo(BillCycleEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
