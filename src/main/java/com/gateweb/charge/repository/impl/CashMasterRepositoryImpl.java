/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
import com.gateweb.charge.repository.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import com.meshinnovation.db.dao.exception.DaoSystemException;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CashMaster
 */
//@Repository("cashMasterRepositoryCustom")
public class CashMasterRepositoryImpl implements CashMasterRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Logger logger = LogManager.getLogger(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	CashMasterRepository cashMasterRepository;
	
	public CashMasterRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchWithVo(CashMasterEntity vo) {
		logger.debug("CashMasterRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashMasterEntity cashMasterEntity = QCashMasterEntity.cashMasterEntity;

		if ( vo.getTaxAmount() != null ) {
			builder.and(cashMasterEntity.taxAmount.eq(vo.getTaxAmount())); //java.math.BigDecimal
		}	
		if ( vo.getNoTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.noTaxInclusiveAmount.eq(vo.getNoTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashMasterEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getInDate() != null ) {
			builder.and(cashMasterEntity.inDate.eq(vo.getInDate())); //java.sql.Timestamp
		}	
		if ( vo.getOutDate() != null ) {
			builder.and(cashMasterEntity.outDate.eq(vo.getOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashMasterEntity.isFirst.equalsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getIsInoutMoneyUnmatch() != null && !"".equals(vo.getIsInoutMoneyUnmatch())) {
			builder.and(cashMasterEntity.isInoutMoneyUnmatch.equalsIgnoreCase(vo.getIsInoutMoneyUnmatch())); //java.lang.String
		}
		if ( vo.getTaxRate() != null ) {
			builder.and(cashMasterEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getEmailSentDate() != null ) {
			builder.and(cashMasterEntity.emailSentDate.eq(vo.getEmailSentDate())); //java.sql.Timestamp
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(cashMasterEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.taxInclusiveAmount.eq(vo.getTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashMasterEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashMasterEntity.outYm.equalsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashMasterEntity.taxType.equalsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getExcelOutDate() != null ) {
			builder.and(cashMasterEntity.excelOutDate.eq(vo.getExcelOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(cashMasterEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashMasterEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(cashMasterEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getInNote() != null && !"".equals(vo.getInNote())) {
			builder.and(cashMasterEntity.inNote.equalsIgnoreCase(vo.getInNote())); //java.lang.String
		}
		if ( vo.getModifyDate() != null ) {
			builder.and(cashMasterEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getBankYm() != null && !"".equals(vo.getBankYm())) {
			builder.and(cashMasterEntity.bankYm.equalsIgnoreCase(vo.getBankYm())); //java.lang.String
		}
		if ( vo.getStatus() != null ) {
			builder.and(cashMasterEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		logger.debug("CashMasterRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashMasterRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchWithVo(CashMasterEntity vo, Pageable pageable) {
		logger.debug("CashMasterRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashMasterEntity cashMasterEntity = QCashMasterEntity.cashMasterEntity;

		if ( vo.getTaxAmount() != null ) {
			builder.and(cashMasterEntity.taxAmount.eq(vo.getTaxAmount())); //java.math.BigDecimal
		}	
		if ( vo.getNoTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.noTaxInclusiveAmount.eq(vo.getNoTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashMasterEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getInDate() != null ) {
			builder.and(cashMasterEntity.inDate.eq(vo.getInDate())); //java.sql.Timestamp
		}	
		if ( vo.getOutDate() != null ) {
			builder.and(cashMasterEntity.outDate.eq(vo.getOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashMasterEntity.isFirst.equalsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getIsInoutMoneyUnmatch() != null && !"".equals(vo.getIsInoutMoneyUnmatch())) {
			builder.and(cashMasterEntity.isInoutMoneyUnmatch.equalsIgnoreCase(vo.getIsInoutMoneyUnmatch())); //java.lang.String
		}
		if ( vo.getTaxRate() != null ) {
			builder.and(cashMasterEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getEmailSentDate() != null ) {
			builder.and(cashMasterEntity.emailSentDate.eq(vo.getEmailSentDate())); //java.sql.Timestamp
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(cashMasterEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.taxInclusiveAmount.eq(vo.getTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashMasterEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashMasterEntity.outYm.equalsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashMasterEntity.taxType.equalsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getExcelOutDate() != null ) {
			builder.and(cashMasterEntity.excelOutDate.eq(vo.getExcelOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(cashMasterEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashMasterEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(cashMasterEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getInNote() != null && !"".equals(vo.getInNote())) {
			builder.and(cashMasterEntity.inNote.equalsIgnoreCase(vo.getInNote())); //java.lang.String
		}
		if ( vo.getModifyDate() != null ) {
			builder.and(cashMasterEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getBankYm() != null && !"".equals(vo.getBankYm())) {
			builder.and(cashMasterEntity.bankYm.equalsIgnoreCase(vo.getBankYm())); //java.lang.String
		}
		if ( vo.getStatus() != null ) {
			builder.and(cashMasterEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		logger.debug("CashMasterRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashMasterRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchWithVo(CashMasterEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchLikeVo(CashMasterEntity vo) {
		logger.debug("CashMasterRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashMasterEntity cashMasterEntity = QCashMasterEntity.cashMasterEntity;

		if ( vo.getTaxAmount() != null ) {
			builder.and(cashMasterEntity.taxAmount.eq(vo.getTaxAmount())); //java.math.BigDecimal
		}	
		if ( vo.getNoTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.noTaxInclusiveAmount.eq(vo.getNoTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashMasterEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getInDate() != null ) {
			builder.and(cashMasterEntity.inDate.eq(vo.getInDate())); //java.sql.Timestamp
		}	
		if ( vo.getOutDate() != null ) {
			builder.and(cashMasterEntity.outDate.eq(vo.getOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashMasterEntity.isFirst.containsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getIsInoutMoneyUnmatch() != null && !"".equals(vo.getIsInoutMoneyUnmatch())) {
			builder.and(cashMasterEntity.isInoutMoneyUnmatch.containsIgnoreCase(vo.getIsInoutMoneyUnmatch())); //java.lang.String
		}
		if ( vo.getTaxRate() != null ) {
			builder.and(cashMasterEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getEmailSentDate() != null ) {
			builder.and(cashMasterEntity.emailSentDate.eq(vo.getEmailSentDate())); //java.sql.Timestamp
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(cashMasterEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.taxInclusiveAmount.eq(vo.getTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashMasterEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashMasterEntity.outYm.containsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashMasterEntity.taxType.containsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getExcelOutDate() != null ) {
			builder.and(cashMasterEntity.excelOutDate.eq(vo.getExcelOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(cashMasterEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashMasterEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(cashMasterEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getInNote() != null && !"".equals(vo.getInNote())) {
			builder.and(cashMasterEntity.inNote.containsIgnoreCase(vo.getInNote())); //java.lang.String
		}
		if ( vo.getModifyDate() != null ) {
			builder.and(cashMasterEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getBankYm() != null && !"".equals(vo.getBankYm())) {
			builder.and(cashMasterEntity.bankYm.containsIgnoreCase(vo.getBankYm())); //java.lang.String
		}
		if ( vo.getStatus() != null ) {
			builder.and(cashMasterEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		logger.debug("CashMasterRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashMasterRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchLikeVo(CashMasterEntity vo, Pageable pageable) {
		logger.debug("CashMasterRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCashMasterEntity cashMasterEntity = QCashMasterEntity.cashMasterEntity;

		if ( vo.getTaxAmount() != null ) {
			builder.and(cashMasterEntity.taxAmount.eq(vo.getTaxAmount())); //java.math.BigDecimal
		}	
		if ( vo.getNoTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.noTaxInclusiveAmount.eq(vo.getNoTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCompanyId() != null ) {
			builder.and(cashMasterEntity.companyId.eq(vo.getCompanyId())); //java.lang.Integer
		}	
		if ( vo.getInDate() != null ) {
			builder.and(cashMasterEntity.inDate.eq(vo.getInDate())); //java.sql.Timestamp
		}	
		if ( vo.getOutDate() != null ) {
			builder.and(cashMasterEntity.outDate.eq(vo.getOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getIsFirst() != null && !"".equals(vo.getIsFirst())) {
			builder.and(cashMasterEntity.isFirst.containsIgnoreCase(vo.getIsFirst())); //java.lang.String
		}
		if ( vo.getIsInoutMoneyUnmatch() != null && !"".equals(vo.getIsInoutMoneyUnmatch())) {
			builder.and(cashMasterEntity.isInoutMoneyUnmatch.containsIgnoreCase(vo.getIsInoutMoneyUnmatch())); //java.lang.String
		}
		if ( vo.getTaxRate() != null ) {
			builder.and(cashMasterEntity.taxRate.eq(vo.getTaxRate())); //java.lang.Float
		}	
		if ( vo.getEmailSentDate() != null ) {
			builder.and(cashMasterEntity.emailSentDate.eq(vo.getEmailSentDate())); //java.sql.Timestamp
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(cashMasterEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getTaxInclusiveAmount() != null ) {
			builder.and(cashMasterEntity.taxInclusiveAmount.eq(vo.getTaxInclusiveAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCashMasterId() != null ) {
			builder.and(cashMasterEntity.cashMasterId.eq(vo.getCashMasterId())); //java.lang.Integer
		}	
		if ( vo.getOutYm() != null && !"".equals(vo.getOutYm())) {
			builder.and(cashMasterEntity.outYm.containsIgnoreCase(vo.getOutYm())); //java.lang.String
		}
		if ( vo.getTaxType() != null && !"".equals(vo.getTaxType())) {
			builder.and(cashMasterEntity.taxType.containsIgnoreCase(vo.getTaxType())); //java.lang.String
		}
		if ( vo.getExcelOutDate() != null ) {
			builder.and(cashMasterEntity.excelOutDate.eq(vo.getExcelOutDate())); //java.sql.Timestamp
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(cashMasterEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(cashMasterEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCreateDate() != null ) {
			builder.and(cashMasterEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getInNote() != null && !"".equals(vo.getInNote())) {
			builder.and(cashMasterEntity.inNote.containsIgnoreCase(vo.getInNote())); //java.lang.String
		}
		if ( vo.getModifyDate() != null ) {
			builder.and(cashMasterEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getBankYm() != null && !"".equals(vo.getBankYm())) {
			builder.and(cashMasterEntity.bankYm.containsIgnoreCase(vo.getBankYm())); //java.lang.String
		}
		if ( vo.getStatus() != null ) {
			builder.and(cashMasterEntity.status.eq(vo.getStatus())); //java.lang.Integer
		}	
		logger.debug("CashMasterRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(cashMasterRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<CashMasterEntity> searchLikeVo(CashMasterEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
