/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
import com.gateweb.charge.repository.*; 
import com.gateweb.charge.model.*;    
import com.gateweb.charge.*;

import com.meshinnovation.db.dao.exception.DaoSystemException;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.util.Collection;
import javax.persistence.Query;
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of Dealer
 */
//@Repository("dealerRepositoryCustom")
public class DealerRepositoryImpl implements DealerRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Logger logger = LogManager.getLogger(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	DealerRepository dealerRepository;
	
	public DealerRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchWithVo(DealerEntity vo) {
		logger.debug("DealerRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QDealerEntity dealerEntity = QDealerEntity.dealerEntity;

		if ( vo.getDealerCompanyId() != null ) {
			builder.and(dealerEntity.dealerCompanyId.eq(vo.getDealerCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(dealerEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(dealerEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getDealerName() != null && !"".equals(vo.getDealerName())) {
			builder.and(dealerEntity.dealerName.equalsIgnoreCase(vo.getDealerName())); //java.lang.String
		}
		if ( vo.getDealerEmail() != null && !"".equals(vo.getDealerEmail())) {
			builder.and(dealerEntity.dealerEmail.equalsIgnoreCase(vo.getDealerEmail())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(dealerEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(dealerEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getDealerPhone() != null && !"".equals(vo.getDealerPhone())) {
			builder.and(dealerEntity.dealerPhone.equalsIgnoreCase(vo.getDealerPhone())); //java.lang.String
		}
		if ( vo.getDealerId() != null ) {
			builder.and(dealerEntity.dealerId.eq(vo.getDealerId())); //java.lang.Integer
		}	
		logger.debug("DealerRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(dealerRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchWithVo(DealerEntity vo, Pageable pageable) {
		logger.debug("DealerRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QDealerEntity dealerEntity = QDealerEntity.dealerEntity;

		if ( vo.getDealerCompanyId() != null ) {
			builder.and(dealerEntity.dealerCompanyId.eq(vo.getDealerCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(dealerEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(dealerEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getDealerName() != null && !"".equals(vo.getDealerName())) {
			builder.and(dealerEntity.dealerName.equalsIgnoreCase(vo.getDealerName())); //java.lang.String
		}
		if ( vo.getDealerEmail() != null && !"".equals(vo.getDealerEmail())) {
			builder.and(dealerEntity.dealerEmail.equalsIgnoreCase(vo.getDealerEmail())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(dealerEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(dealerEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getDealerPhone() != null && !"".equals(vo.getDealerPhone())) {
			builder.and(dealerEntity.dealerPhone.equalsIgnoreCase(vo.getDealerPhone())); //java.lang.String
		}
		if ( vo.getDealerId() != null ) {
			builder.and(dealerEntity.dealerId.eq(vo.getDealerId())); //java.lang.Integer
		}	
		logger.debug("DealerRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(dealerRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchWithVo(DealerEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchLikeVo(DealerEntity vo) {
		logger.debug("DealerRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QDealerEntity dealerEntity = QDealerEntity.dealerEntity;

		if ( vo.getDealerCompanyId() != null ) {
			builder.and(dealerEntity.dealerCompanyId.eq(vo.getDealerCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(dealerEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(dealerEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getDealerName() != null && !"".equals(vo.getDealerName())) {
			builder.and(dealerEntity.dealerName.containsIgnoreCase(vo.getDealerName())); //java.lang.String
		}
		if ( vo.getDealerEmail() != null && !"".equals(vo.getDealerEmail())) {
			builder.and(dealerEntity.dealerEmail.containsIgnoreCase(vo.getDealerEmail())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(dealerEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(dealerEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getDealerPhone() != null && !"".equals(vo.getDealerPhone())) {
			builder.and(dealerEntity.dealerPhone.containsIgnoreCase(vo.getDealerPhone())); //java.lang.String
		}
		if ( vo.getDealerId() != null ) {
			builder.and(dealerEntity.dealerId.eq(vo.getDealerId())); //java.lang.Integer
		}	
		logger.debug("DealerRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(dealerRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchLikeVo(DealerEntity vo, Pageable pageable) {
		logger.debug("DealerRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QDealerEntity dealerEntity = QDealerEntity.dealerEntity;

		if ( vo.getDealerCompanyId() != null ) {
			builder.and(dealerEntity.dealerCompanyId.eq(vo.getDealerCompanyId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(dealerEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(dealerEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getDealerName() != null && !"".equals(vo.getDealerName())) {
			builder.and(dealerEntity.dealerName.containsIgnoreCase(vo.getDealerName())); //java.lang.String
		}
		if ( vo.getDealerEmail() != null && !"".equals(vo.getDealerEmail())) {
			builder.and(dealerEntity.dealerEmail.containsIgnoreCase(vo.getDealerEmail())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(dealerEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(dealerEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getDealerPhone() != null && !"".equals(vo.getDealerPhone())) {
			builder.and(dealerEntity.dealerPhone.containsIgnoreCase(vo.getDealerPhone())); //java.lang.String
		}
		if ( vo.getDealerId() != null ) {
			builder.and(dealerEntity.dealerId.eq(vo.getDealerId())); //java.lang.Integer
		}	
		logger.debug("DealerRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(dealerRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<DealerEntity> searchLikeVo(DealerEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
