/*
 * $Header: $
 * This java source file is generated by pkliu on Tue Jan 30 14:38:14 CST 2018
 * For more information, please contact pkliu@sysfoundry.com
 */
package com.gateweb.charge.repository.impl; 
//import org.springframework.orm.ObjectRetrievalFailureException;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.gateweb.charge.model.CommissionLogEntity;
import com.gateweb.charge.model.QCommissionLogEntity;
import com.gateweb.charge.repository.CommissionLogRepository;
import com.gateweb.charge.repository.CommissionLogRepositoryCustom;
import com.google.common.collect.Lists;
import com.querydsl.core.BooleanBuilder;


/**
 * 
 * @author pkliu
 *
 * This class provides methods to populate DB Table of CommissionLog
 */
//@Repository("commissionLogRepositoryCustom")
public class CommissionLogRepositoryImpl implements CommissionLogRepositoryCustom {
	
	/**
	 * <p>
	 * <code>Log</code> instance for this application.
	 * </p>
	 */
	protected final Logger logger = LogManager.getLogger(getClass());
	
	/*	@PersistenceContext
	private EntityManager em;

	public void setEntityManager(EntityManager em) {
		this.em = em;
	}*/

	@Autowired
	CommissionLogRepository commissionLogRepository;
	
	public CommissionLogRepositoryImpl(){
	}
	

	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchWithVo(CommissionLogEntity vo) {
		logger.debug("CommissionLogRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCommissionLogEntity commissionLogEntity = QCommissionLogEntity.commissionLogEntity;

		if ( vo.getNote() != null && !"".equals(vo.getNote())) {
			builder.and(commissionLogEntity.note.equalsIgnoreCase(vo.getNote())); //java.lang.String
		}
		if ( vo.getAddtionPercent() != null ) {
			builder.and(commissionLogEntity.addtionPercent.eq(vo.getAddtionPercent())); //java.math.BigDecimal
		}	
		if ( vo.getInDateEnd() != null && !"".equals(vo.getInDateEnd())) {
			builder.and(commissionLogEntity.inDateEnd.eq(vo.getInDateEnd())); //java.util.Date
		}
		if ( vo.getCommissionAmount() != null ) {
			builder.and(commissionLogEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCollectMoney() != null ) {
			builder.and(commissionLogEntity.collectMoney.eq(vo.getCollectMoney())); //java.math.BigDecimal
		}	
		if ( vo.getCommissionYmd() != null && !"".equals(vo.getCommissionYmd())) {
			builder.and(commissionLogEntity.commissionYmd.equalsIgnoreCase(vo.getCommissionYmd())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(commissionLogEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getMainAmount() != null ) {
			builder.and(commissionLogEntity.mainAmount.eq(vo.getMainAmount())); //java.math.BigDecimal
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(commissionLogEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getMainPercent() != null ) {
			builder.and(commissionLogEntity.mainPercent.eq(vo.getMainPercent())); //java.math.BigDecimal
		}	
		if ( vo.getUserCpId() != null ) {
			builder.and(commissionLogEntity.userCpId.eq(vo.getUserCpId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(commissionLogEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(commissionLogEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCommissionCpId() != null ) {
			builder.and(commissionLogEntity.commissionCpId.eq(vo.getCommissionCpId())); //java.lang.Integer
		}	
		if ( vo.getIsPaid() != null && !"".equals(vo.getIsPaid())) {
			builder.and(commissionLogEntity.isPaid.equalsIgnoreCase(vo.getIsPaid())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(commissionLogEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(commissionLogEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCommissionType() != null && !"".equals(vo.getCommissionType())) {
			builder.and(commissionLogEntity.commissionType.equalsIgnoreCase(vo.getCommissionType())); //java.lang.String
		}
		if ( vo.getInDateStart() != null && !"".equals(vo.getInDateStart())) {
			builder.and(commissionLogEntity.inDateStart.eq(vo.getInDateStart())); //java.util.Date
		}
		logger.debug("CommissionLogRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(commissionLogRepository.findAll(builder.getValue()));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchWithVo(CommissionLogEntity vo, Pageable pageable) {
		logger.debug("CommissionLogRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCommissionLogEntity commissionLogEntity = QCommissionLogEntity.commissionLogEntity;

		if ( vo.getNote() != null && !"".equals(vo.getNote())) {
			builder.and(commissionLogEntity.note.equalsIgnoreCase(vo.getNote())); //java.lang.String
		}
		if ( vo.getAddtionPercent() != null ) {
			builder.and(commissionLogEntity.addtionPercent.eq(vo.getAddtionPercent())); //java.math.BigDecimal
		}	
		if ( vo.getInDateEnd() != null && !"".equals(vo.getInDateEnd())) {
			builder.and(commissionLogEntity.inDateEnd.eq(vo.getInDateEnd())); //java.util.Date
		}
		if ( vo.getCommissionAmount() != null ) {
			builder.and(commissionLogEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCollectMoney() != null ) {
			builder.and(commissionLogEntity.collectMoney.eq(vo.getCollectMoney())); //java.math.BigDecimal
		}	
		if ( vo.getCommissionYmd() != null && !"".equals(vo.getCommissionYmd())) {
			builder.and(commissionLogEntity.commissionYmd.equalsIgnoreCase(vo.getCommissionYmd())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(commissionLogEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getMainAmount() != null ) {
			builder.and(commissionLogEntity.mainAmount.eq(vo.getMainAmount())); //java.math.BigDecimal
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(commissionLogEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getMainPercent() != null ) {
			builder.and(commissionLogEntity.mainPercent.eq(vo.getMainPercent())); //java.math.BigDecimal
		}	
		if ( vo.getUserCpId() != null ) {
			builder.and(commissionLogEntity.userCpId.eq(vo.getUserCpId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(commissionLogEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(commissionLogEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCommissionCpId() != null ) {
			builder.and(commissionLogEntity.commissionCpId.eq(vo.getCommissionCpId())); //java.lang.Integer
		}	
		if ( vo.getIsPaid() != null && !"".equals(vo.getIsPaid())) {
			builder.and(commissionLogEntity.isPaid.equalsIgnoreCase(vo.getIsPaid())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(commissionLogEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(commissionLogEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCommissionType() != null && !"".equals(vo.getCommissionType())) {
			builder.and(commissionLogEntity.commissionType.equalsIgnoreCase(vo.getCommissionType())); //java.lang.String
		}
		if ( vo.getInDateStart() != null && !"".equals(vo.getInDateStart())) {
			builder.and(commissionLogEntity.inDateStart.eq(vo.getInDateStart())); //java.util.Date
		}
		logger.debug("CommissionLogRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(commissionLogRepository.findAll(builder.getValue(), pageable));	
	}
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchWithVo(CommissionLogEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchWithVo(vo, pageable);
	}
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchLikeVo(CommissionLogEntity vo) {
		logger.debug("CommissionLogRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCommissionLogEntity commissionLogEntity = QCommissionLogEntity.commissionLogEntity;

		if ( vo.getNote() != null && !"".equals(vo.getNote())) {
			builder.and(commissionLogEntity.note.containsIgnoreCase(vo.getNote())); //java.lang.String
		}
		if ( vo.getAddtionPercent() != null ) {
			builder.and(commissionLogEntity.addtionPercent.eq(vo.getAddtionPercent())); //java.math.BigDecimal
		}	
		if ( vo.getInDateEnd() != null && !"".equals(vo.getInDateEnd())) {
			builder.and(commissionLogEntity.inDateEnd.eq(vo.getInDateEnd())); //java.util.Date
		}
		if ( vo.getCommissionAmount() != null ) {
			builder.and(commissionLogEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCollectMoney() != null ) {
			builder.and(commissionLogEntity.collectMoney.eq(vo.getCollectMoney())); //java.math.BigDecimal
		}	
		if ( vo.getCommissionYmd() != null && !"".equals(vo.getCommissionYmd())) {
			builder.and(commissionLogEntity.commissionYmd.containsIgnoreCase(vo.getCommissionYmd())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(commissionLogEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getMainAmount() != null ) {
			builder.and(commissionLogEntity.mainAmount.eq(vo.getMainAmount())); //java.math.BigDecimal
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(commissionLogEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getMainPercent() != null ) {
			builder.and(commissionLogEntity.mainPercent.eq(vo.getMainPercent())); //java.math.BigDecimal
		}	
		if ( vo.getUserCpId() != null ) {
			builder.and(commissionLogEntity.userCpId.eq(vo.getUserCpId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(commissionLogEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(commissionLogEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCommissionCpId() != null ) {
			builder.and(commissionLogEntity.commissionCpId.eq(vo.getCommissionCpId())); //java.lang.Integer
		}	
		if ( vo.getIsPaid() != null && !"".equals(vo.getIsPaid())) {
			builder.and(commissionLogEntity.isPaid.containsIgnoreCase(vo.getIsPaid())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(commissionLogEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(commissionLogEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCommissionType() != null && !"".equals(vo.getCommissionType())) {
			builder.and(commissionLogEntity.commissionType.containsIgnoreCase(vo.getCommissionType())); //java.lang.String
		}
		if ( vo.getInDateStart() != null && !"".equals(vo.getInDateStart())) {
			builder.and(commissionLogEntity.inDateStart.eq(vo.getInDateStart())); //java.util.Date
		}
		logger.debug("CommissionLogRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(commissionLogRepository.findAll(builder.getValue()));
	}		
	
	

	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchLikeVo(CommissionLogEntity vo, Pageable pageable) {
		logger.debug("CommissionLogRepositoryImpl searchWithVo vo: " + vo);
		BooleanBuilder builder = new BooleanBuilder();
		QCommissionLogEntity commissionLogEntity = QCommissionLogEntity.commissionLogEntity;

		if ( vo.getNote() != null && !"".equals(vo.getNote())) {
			builder.and(commissionLogEntity.note.containsIgnoreCase(vo.getNote())); //java.lang.String
		}
		if ( vo.getAddtionPercent() != null ) {
			builder.and(commissionLogEntity.addtionPercent.eq(vo.getAddtionPercent())); //java.math.BigDecimal
		}	
		if ( vo.getInDateEnd() != null && !"".equals(vo.getInDateEnd())) {
			builder.and(commissionLogEntity.inDateEnd.eq(vo.getInDateEnd())); //java.util.Date
		}
		if ( vo.getCommissionAmount() != null ) {
			builder.and(commissionLogEntity.commissionAmount.eq(vo.getCommissionAmount())); //java.math.BigDecimal
		}	
		if ( vo.getCollectMoney() != null ) {
			builder.and(commissionLogEntity.collectMoney.eq(vo.getCollectMoney())); //java.math.BigDecimal
		}	
		if ( vo.getCommissionYmd() != null && !"".equals(vo.getCommissionYmd())) {
			builder.and(commissionLogEntity.commissionYmd.containsIgnoreCase(vo.getCommissionYmd())); //java.lang.String
		}
		if ( vo.getCommissionLogId() != null ) {
			builder.and(commissionLogEntity.commissionLogId.eq(vo.getCommissionLogId())); //java.lang.Integer
		}	
		if ( vo.getMainAmount() != null ) {
			builder.and(commissionLogEntity.mainAmount.eq(vo.getMainAmount())); //java.math.BigDecimal
		}	
		if ( vo.getInAmount() != null ) {
			builder.and(commissionLogEntity.inAmount.eq(vo.getInAmount())); //java.math.BigDecimal
		}	
		if ( vo.getMainPercent() != null ) {
			builder.and(commissionLogEntity.mainPercent.eq(vo.getMainPercent())); //java.math.BigDecimal
		}	
		if ( vo.getUserCpId() != null ) {
			builder.and(commissionLogEntity.userCpId.eq(vo.getUserCpId())); //java.lang.Integer
		}	
		if ( vo.getCreatorId() != null ) {
			builder.and(commissionLogEntity.creatorId.eq(vo.getCreatorId())); //java.lang.Integer
		}	
		if ( vo.getModifierId() != null ) {
			builder.and(commissionLogEntity.modifierId.eq(vo.getModifierId())); //java.lang.Integer
		}	
		if ( vo.getCommissionCpId() != null ) {
			builder.and(commissionLogEntity.commissionCpId.eq(vo.getCommissionCpId())); //java.lang.Integer
		}	
		if ( vo.getIsPaid() != null && !"".equals(vo.getIsPaid())) {
			builder.and(commissionLogEntity.isPaid.containsIgnoreCase(vo.getIsPaid())); //java.lang.String
		}
		if ( vo.getCreateDate() != null ) {
			builder.and(commissionLogEntity.createDate.eq(vo.getCreateDate())); //java.sql.Timestamp
		}	
		if ( vo.getModifyDate() != null ) {
			builder.and(commissionLogEntity.modifyDate.eq(vo.getModifyDate())); //java.sql.Timestamp
		}	
		if ( vo.getCommissionType() != null && !"".equals(vo.getCommissionType())) {
			builder.and(commissionLogEntity.commissionType.containsIgnoreCase(vo.getCommissionType())); //java.lang.String
		}
		if ( vo.getInDateStart() != null && !"".equals(vo.getInDateStart())) {
			builder.and(commissionLogEntity.inDateStart.eq(vo.getInDateStart())); //java.util.Date
		}
		logger.debug("CommissionLogRepositoryImpl searchWithVo predicate  " + builder.getValue());
		return Lists.newArrayList(commissionLogRepository.findAll(builder.getValue(), pageable));
	}	
	
	@SuppressWarnings("unchecked")
	public List<CommissionLogEntity> searchLikeVo(CommissionLogEntity vo, int pageOffset, int pageSize) {
		Pageable pageable = new PageRequest(pageOffset, pageSize);
		return searchLikeVo(vo, pageable);
	}
	
}
